@model StockDataWebsite.Models.CompanySelection

@{
    ViewData["Title"] = "Scraper Page";
}

@functions {
    public bool IsUserAdmin()
    {
        // Example logic: read "Username" from session
        var username = Context.Session.GetString("Username");
        if (string.IsNullOrEmpty(username))
            return false;

        // TODO: Fetch the user from DB or from session
        // e.g. var user = _context.Users.FirstOrDefault(u => u.Username == username);
        // return user != null && user.Admin;

        // TEMPORARY stub: for demonstration only
        // Return 'true' or 'false' based on your actual logic
        return false;
    }
}

<h2>Select a Company for SEC Reports</h2>

<!-- Display the total number of scraped and unscraped companies -->
<h4>Total number of scraped companies in database: <span id="scrapedCompaniesCount">Loading...</span></h4>
<h4>Total number of unscraped companies: <span id="unscrapedCompaniesCount">Loading...</span></h4>

<form asp-action="Scrape" method="post">
    <div class="form-group">
        <label for="CompanySearch">Search by Company Name or Symbol</label>
        <input type="text" class="form-control" id="CompanySearch" asp-for="CompanyName"
               placeholder="Enter company name or symbol" autocomplete="off" required />
        <input type="hidden" asp-for="CompanySymbol" />
        <div id="suggestions" class="list-group"></div>
    </div>

    <!-- NEW: Checkbox for only last 6 months -->
    <div class="form-check">
        <input class="form-check-input" type="checkbox" value="true" id="OnlyLast6Months" name="onlyLast6Months">
        <label class="form-check-label" for="OnlyLast6Months">
            Parse only newly added reports for the last 6 months
        </label>
    </div>

    <div class="form-group mt-3">
        <label for="selectedCompaniesList">Selected Companies</label>
        <ul id="selectedCompaniesList" class="list-group">
            <!-- Pre-populate the selected company if present in the Model -->
            @if (Model != null && !string.IsNullOrEmpty(Model.CompanySymbol))
            {
                <li class="list-group-item" data-symbol="@Model.CompanySymbol">
                    @Model.CompanyName (@Model.CompanySymbol)
                </li>
            }
        </ul>
    </div>

    <!-- Button to remove a selected company from the list -->
    <button type="button" id="removeCompany" class="btn btn-danger custom-margin">Remove Selected Company</button>

    <button type="submit" class="btn btn-primary custom-margin">Scrape Reports</button>
</form>

<div asp-validation-summary="ModelOnly" class="text-danger"></div> <!-- Model-wide validation errors -->
<!-- Form for fetching stock info -->
<form asp-action="FetchStockInfo" asp-controller="StockInfo" method="post">
    <button type="submit" class="btn btn-primary custom-margin">Update CompaniesList.dbo</button>
</form>

<!-- Buttons for scraping reports -->
<div class="mt-3">
    <!-- Button to scrape unscraped reports -->
    <button id="scrapeUnscrapedReports" class="btn btn-primary custom-margin">Scrape Unscraped Reports</button>

    <!-- Button to continue scraping reports -->
    <button id="continueScrapingReports" class="btn btn-secondary custom-margin">Continue Scraping Reports</button>

    <button id="countNumericalValuesBtn" class="btn btn-info custom-margin">Count Numerical Values</button>
    <div id="countResult" class="mt-2"></div>

    <!-- Button to parse and save XBRL data -->
    <button id="parseXbrlBtn" class="btn btn-success custom-margin">Parse and Save XBRL Name Data</button>
    <div id="parseXbrlResult" class="mt-2"></div>
    <div id="parseXbrlLoading" class="spinner-border text-primary mt-2" role="status" style="display: none;">
        <span class="sr-only">Loading...</span>
    </div>
</div>

<!-- NEW: Button to scrape all companies -->
<div class="mt-3">
    <button id="scrapeAllCompaniesBtn" class="btn btn-danger custom-margin">Scrape All Companies</button>
    <div id="scrapeAllCompaniesResult" class="mt-2"></div>
</div>

<!-- New Section: Extract and Display Unique XBRL Elements -->
<div class="mt-3">
    <button id="extractXbrlElementsBtn" class="btn btn-warning custom-margin">Extract Unique XBRL Elements</button>
    <div id="uniqueXbrlElementsResult" class="mt-3"></div>
</div>

@if (ViewBag.Result != null)
{
    <div class="alert alert-success mt-3">
        @ViewBag.Result
    </div>
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Function to fetch and display company counts
            function loadCompanyCounts() {
                fetch('/api/companies/counts')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('scrapedCompaniesCount').textContent = data.scrapedCompaniesCount;
                        document.getElementById('unscrapedCompaniesCount').textContent = data.unscrapedCompaniesCount;
                    })
                    .catch(error => {
                        console.error('Error fetching counts:', error);
                        document.getElementById('scrapedCompaniesCount').textContent = 'Error';
                        document.getElementById('unscrapedCompaniesCount').textContent = 'Error';
                    });
            }

            // Initial load of company counts
            loadCompanyCounts();

            // Handle Scrape Unscraped Reports button
            const scrapeButton = document.getElementById('scrapeUnscrapedReports');
            let isScraping = false;

            scrapeButton.addEventListener('click', function () {
                if (!isScraping) {
                    isScraping = true;
                    scrapeButton.textContent = 'Stop Scraping';
                    scrapeButton.classList.remove('btn-primary');
                    scrapeButton.classList.add('btn-danger');

                    // Start scraping via API
                    fetch('/Scraper/ScrapeUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(errorContainer);
                            }

                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during scraping:', error);

                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during scraping.';
                            scrapeButton.parentElement.appendChild(errorContainer);

                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;
                        });
                } else {
                    alert('Scraping process stopped by user.');
                    scrapeButton.textContent = 'Scrape Unscraped Reports';
                    scrapeButton.classList.remove('btn-danger');
                    scrapeButton.classList.add('btn-primary');
                    isScraping = false;
                }
            });

            // Handle Continue Scraping Reports button
            const continueScrapeButton = document.getElementById('continueScrapingReports');
            let isContinuingScraping = false;

            continueScrapeButton.addEventListener('click', function () {
                if (!isContinuingScraping) {
                    isContinuingScraping = true;
                    continueScrapeButton.textContent = 'Pause Scraping';
                    continueScrapeButton.classList.remove('btn-secondary');
                    continueScrapeButton.classList.add('btn-warning');

                    fetch('/Scraper/ContinueScrapingUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(errorContainer);
                            }

                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during continuing scraping:', error);

                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during continuing scraping.';
                            continueScrapeButton.parentElement.appendChild(errorContainer);

                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;
                        });
                } else {
                    alert('Continuing scraping process paused by user.');
                    continueScrapeButton.textContent = 'Continue Scraping Reports';
                    continueScrapeButton.classList.remove('btn-warning');
                    continueScrapeButton.classList.add('btn-secondary');
                    isContinuingScraping = false;
                }
            });

            // Handle Parse and Save XBRL Data button
            const parseXbrlBtn = document.getElementById('parseXbrlBtn');
            const parseXbrlResult = document.getElementById('parseXbrlResult');
            const parseXbrlLoading = document.getElementById('parseXbrlLoading');

            parseXbrlBtn.addEventListener('click', function () {
                const button = this;
                button.disabled = true;
                parseXbrlLoading.style.display = 'inline-block';
                parseXbrlResult.innerHTML = 'Processing...';

                fetch('/Scraper/ParseAndSaveXbrlData', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({})
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            parseXbrlResult.innerHTML = `<span class="text-success">${data.message}</span>`;
                        } else {
                            parseXbrlResult.innerHTML = `<span class="text-danger">${data.message}</span>`;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        parseXbrlResult.innerHTML = '<span class="text-danger">An unexpected error occurred.</span>';
                    })
                    .finally(() => {
                        button.disabled = false;
                        parseXbrlLoading.style.display = 'none';
                    });
            });

            // Handle Count Numerical Values button
            const countNumericalValuesBtn = document.getElementById('countNumericalValuesBtn');
            const countResult = document.getElementById('countResult');

            countNumericalValuesBtn.addEventListener('click', function () {
                countNumericalValuesBtn.disabled = true;
                countResult.innerHTML = '<span class="text-info">Counting numerical values...</span>';

                fetch('/Scraper/CountNumericalValues', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server error: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.Count !== undefined) {
                        countResult.innerHTML = `<span class="text-success">Total Numerical Values Counted: ${data.Count}</span>`;
                    } else {
                        countResult.innerHTML = '<span class="text-danger">Unexpected response from the server.</span>';
                    }
                })
                .catch(error => {
                    console.error('Error counting numerical values:', error);
                    countResult.innerHTML = '<span class="text-danger">An error occurred while counting numerical values.</span>';
                })
                .finally(() => {
                    countNumericalValuesBtn.disabled = false;
                });
            });

            // Handle Extract and Display Unique XBRL Elements button
            const extractXbrlElementsBtn = document.getElementById('extractXbrlElementsBtn');
            const uniqueXbrlElementsResult = document.getElementById('uniqueXbrlElementsResult');

            extractXbrlElementsBtn.addEventListener('click', function () {
                extractXbrlElementsBtn.disabled = true;
                uniqueXbrlElementsResult.innerHTML = '<span class="text-info">Extracting unique XBRL elements...</span>';

                fetch('/api/scraper/unique-xbrl-elements', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const elements = data.elements;
                        if (elements.length > 0) {
                            let html = '<h4>Unique XBRL Elements:</h4><ul class="list-group">';
                            elements.forEach(element => {
                                html += `<li class="list-group-item">${element}</li>`;
                            });
                            html += '</ul>';
                            uniqueXbrlElementsResult.innerHTML = html;
                        } else {
                            uniqueXbrlElementsResult.innerHTML = '<span class="text-warning">No unique XBRL elements found.</span>';
                        }
                    } else {
                        uniqueXbrlElementsResult.innerHTML = `<span class="text-danger">${data.message}</span>`;
                    }
                })
                .catch(error => {
                    console.error('Error extracting unique XBRL elements:', error);
                    uniqueXbrlElementsResult.innerHTML = '<span class="text-danger">An error occurred while extracting XBRL elements.</span>';
                })
                .finally(() => {
                    extractXbrlElementsBtn.disabled = false;
                });
            });

            // NEW: Handle Scrape All Companies button
            const scrapeAllCompaniesBtn = document.getElementById('scrapeAllCompaniesBtn');
            const scrapeAllCompaniesResult = document.getElementById('scrapeAllCompaniesResult');
            let isScrapingAll = false;

            scrapeAllCompaniesBtn.addEventListener('click', function () {
                if (!isScrapingAll) {
                    if (!confirm('Are you sure you want to scrape reports for ALL companies? This may take a significant amount of time.')) {
                        return;
                    }

                    isScrapingAll = true;
                    scrapeAllCompaniesBtn.disabled = true;
                    scrapeAllCompaniesBtn.textContent = 'Scraping All Companies...';
                    scrapeAllCompaniesResult.innerHTML = '<span class="text-info">Scraping all companies in progress...</span>';

                    fetch('/Scraper/ScrapeAllCompanies', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({})
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                scrapeAllCompaniesResult.innerHTML = `<span class="text-success">${data.message}</span>`;
                            } else {
                                scrapeAllCompaniesResult.innerHTML = `<span class="text-danger">${data.message}</span>`;
                            }
                        })
                        .catch(error => {
                            console.error('Error scraping all companies:', error);
                            scrapeAllCompaniesResult.innerHTML = '<span class="text-danger">An error occurred while scraping all companies.</span>';
                        })
                        .finally(() => {
                            scrapeAllCompaniesBtn.disabled = false;
                            scrapeAllCompaniesBtn.textContent = 'Scrape All Companies';
                            isScrapingAll = false;
                            loadCompanyCounts();
                        });
                }
            });

            // Helper function to get Anti-Forgery Token (if CSRF protection is enabled)
            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            // Handle company search input for suggestions
            const companySearchInput = document.getElementById('CompanySearch');
            const suggestionsContainer = document.getElementById('suggestions');
            const selectedCompaniesList = document.getElementById('selectedCompaniesList');
            const hiddenCompanySymbolInput = document.querySelector('input[name="CompanySymbol"]');

            companySearchInput.addEventListener('input', function () {
                const query = this.value.trim();

                if (query.length >= 2) {
                    fetch(`/api/companies/search?query=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            suggestionsContainer.innerHTML = '';
                            if (data.length > 0) {
                                data.forEach(company => {
                                    const suggestionItem = document.createElement('a');
                                    suggestionItem.classList.add('list-group-item', 'list-group-item-action');
                                    suggestionItem.textContent = `${company.companyName} (${company.companySymbol})`;

                                    suggestionItem.addEventListener('click', function () {
                                        selectedCompaniesList.innerHTML = '';

                                        const listItem = document.createElement('li');
                                        listItem.classList.add('list-group-item');
                                        listItem.textContent = `${company.companyName} (${company.companySymbol})`;
                                        listItem.dataset.symbol = company.companySymbol;
                                        selectedCompaniesList.appendChild(listItem);

                                        hiddenCompanySymbolInput.value = company.companySymbol;
                                        companySearchInput.value = '';
                                        suggestionsContainer.innerHTML = '';
                                    });
                                    suggestionsContainer.appendChild(suggestionItem);
                                });
                            } else {
                                const noResultsItem = document.createElement('div');
                                noResultsItem.classList.add('list-group-item');
                                noResultsItem.textContent = 'No results found';
                                suggestionsContainer.appendChild(noResultsItem);
                            }
                        })
                        .catch(error => console.error('Error fetching suggestions:', error));
                } else {
                    suggestionsContainer.innerHTML = '';
                }
            });

            // Handle removing the selected company from the list
            const removeCompanyButton = document.getElementById('removeCompany');
            removeCompanyButton.addEventListener('click', function () {
                const selectedCompanyItem = selectedCompaniesList.querySelector('li');
                if (selectedCompanyItem) {
                    const companySymbol = selectedCompanyItem.getAttribute('data-symbol');
                    fetch('/Scraper/RemoveSelectedCompany', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ companySymbol: companySymbol })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                selectedCompaniesList.removeChild(selectedCompanyItem);
                                hiddenCompanySymbolInput.value = '';
                            } else {
                                alert(data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error removing company:', error);
                            alert('An error occurred while removing the company.');
                        });
                } else {
                    alert('Please select a company to remove.');
                }
            });

            // Reload company counts periodically (e.g., every 5 minutes)
            setInterval(loadCompanyCounts, 300000);
        });
    </script>

    <!-- Include Bootstrap JS for better UI (if not already included) -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"
            integrity="sha384-LtrjvnR4Twt/qOuYx+vQy8haBBN8d1Y5lrogr4+17F6Dz8uK6rfsQbLX7hg/KjMG"
            crossorigin="anonymous"></script>
}



@* 
@model StockDataWebsite.Models.CompanySelection

@{
    ViewData["Title"] = "Scraper Page";
}

@functions {
    public bool IsUserAdmin()
    {
        // Example logic: read "Username" from session
        var username = Context.Session.GetString("Username");
        if (string.IsNullOrEmpty(username))
            return false;

        // TODO: Fetch the user from DB or from session
        // e.g. var user = _context.Users.FirstOrDefault(u => u.Username == username);
        // return user != null && user.Admin;

        // TEMPORARY stub: for demonstration only
        // Return 'true' or 'false' based on your actual logic
        return false;
    }
}

<h2>Select a Company for SEC Reports</h2>

<!-- Display the total number of scraped and unscraped companies -->
<h4>Total number of scraped companies in database: <span id="scrapedCompaniesCount">Loading...</span></h4>
<h4>Total number of unscraped companies: <span id="unscrapedCompaniesCount">Loading...</span></h4>

@* <!-- Form for scraping reports -->
<form asp-action="Scrape" method="post">
    <div class="form-group">
        <label for="CompanySearch">Search by Company Name or Symbol</label>
        <input type="text" class="form-control" id="CompanySearch" asp-for="CompanyName" placeholder="Enter company name or symbol" autocomplete="off" required />
        <input type="hidden" asp-for="CompanySymbol" /> <!-- Hidden input for CompanySymbol -->
        <div id="suggestions" class="list-group"></div>
    </div>

    <!-- Selected companies list -->
    <div class="form-group">
        <label for="selectedCompaniesList">Selected Companies</label>
        <ul id="selectedCompaniesList" class="list-group">
            <!-- Pre-populate the selected company if present in the Model -->
            @if (Model != null && !string.IsNullOrEmpty(Model.CompanySymbol))
            {
                <li class="list-group-item" data-symbol="@Model.CompanySymbol">
                    @Model.CompanyName (@Model.CompanySymbol)
                </li>
            }
        </ul>
    </div>

    <!-- Button to remove a selected company from the list -->
    <button type="button" id="removeCompany" class="btn btn-danger custom-margin">Remove Selected Company</button>

    <button type="submit" class="btn btn-primary custom-margin">Scrape Reports</button>
</form>
<form asp-action="Scrape" method="post">
    <div class="form-group">
        <label for="CompanySearch">Search by Company Name or Symbol</label>
        <input type="text" class="form-control" id="CompanySearch" asp-for="CompanyName"
               placeholder="Enter company name or symbol" autocomplete="off" required />
        <input type="hidden" asp-for="CompanySymbol" />
        <div id="suggestions" class="list-group"></div>
    </div>

    <!-- NEW: Checkbox for only last 6 months -->
    <div class="form-check">
        <input class="form-check-input" type="checkbox" value="true" id="OnlyLast6Months" name="onlyLast6Months">
        <label class="form-check-label" for="OnlyLast6Months">
            Parse only newly added reports for the last 6 months
        </label>
    </div>

    <div class="form-group mt-3">
        <label for="selectedCompaniesList">Selected Companies</label>
        <ul id="selectedCompaniesList" class="list-group">
            <!-- ... existing logic ... -->
        </ul>
    </div>

    <button type="submit" class="btn btn-primary custom-margin">Scrape Reports</button>
</form>


<div asp-validation-summary="ModelOnly" class="text-danger"></div> <!-- Model-wide validation errors -->

<!-- Form for fetching stock info -->
<form asp-action="FetchStockInfo" asp-controller="StockInfo" method="post">
    <button type="submit" class="btn btn-primary custom-margin">Update CompaniesList.dbo</button>
</form>

<!-- Buttons for scraping reports -->
<div class="mt-3">
    <!-- Button to scrape unscraped reports -->
    <button id="scrapeUnscrapedReports" class="btn btn-primary custom-margin">Scrape Unscraped Reports</button>

    <!-- New Button: Continue Scraping Reports -->
    <button id="continueScrapingReports" class="btn btn-secondary custom-margin">Continue Scraping Reports</button>
    <button id="countNumericalValuesBtn" class="btn btn-info custom-margin">Count Numerical Values</button>
    <div id="countResult" class="mt-2"></div>
    <!-- New Button: Parse and Save XBRL Data -->
    <button id="parseXbrlBtn" class="btn btn-success custom-margin">Parse and Save XBRL Name Data</button>
    <div id="parseXbrlResult" class="mt-2"></div>
    <div id="parseXbrlLoading" class="spinner-border text-primary mt-2" role="status" style="display: none;">
        <span class="sr-only">Loading...</span>
    </div>
</div>

<!-- New Section: Extract and Display Unique XBRL Elements -->
<div class="mt-3">
    <button id="extractXbrlElementsBtn" class="btn btn-warning custom-margin">Extract Unique XBRL Elements</button>
    <div id="uniqueXbrlElementsResult" class="mt-3"></div>
</div>

@if (ViewBag.Result != null)
{
    <div class="alert alert-success mt-3">
        @ViewBag.Result
    </div>
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Function to fetch and display company counts
            function loadCompanyCounts() {
                fetch('/api/companies/counts')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('scrapedCompaniesCount').textContent = data.scrapedCompaniesCount;
                        document.getElementById('unscrapedCompaniesCount').textContent = data.unscrapedCompaniesCount;
                    })
                    .catch(error => {
                        console.error('Error fetching counts:', error);
                        document.getElementById('scrapedCompaniesCount').textContent = 'Error';
                        document.getElementById('unscrapedCompaniesCount').textContent = 'Error';
                    });
            }

            // Initial load of company counts
            loadCompanyCounts();

            // Handle Scrape Unscraped Reports button
            const scrapeButton = document.getElementById('scrapeUnscrapedReports');
            let isScraping = false;

            scrapeButton.addEventListener('click', function () {
                if (!isScraping) {
                    isScraping = true;
                    scrapeButton.textContent = 'Stop Scraping';
                    scrapeButton.classList.remove('btn-primary');
                    scrapeButton.classList.add('btn-danger');

                    // Start scraping via API
                    fetch('/Scraper/ScrapeUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(errorContainer);
                            }

                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during scraping:', error);

                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during scraping.';
                            scrapeButton.parentElement.appendChild(errorContainer);

                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;
                        });
                } else {
                    alert('Scraping process stopped by user.');
                    scrapeButton.textContent = 'Scrape Unscraped Reports';
                    scrapeButton.classList.remove('btn-danger');
                    scrapeButton.classList.add('btn-primary');
                    isScraping = false;
                }
            });

            // Handle Continue Scraping Reports button
            const continueScrapeButton = document.getElementById('continueScrapingReports');
            let isContinuingScraping = false;

            continueScrapeButton.addEventListener('click', function () {
                if (!isContinuingScraping) {
                    isContinuingScraping = true;
                    continueScrapeButton.textContent = 'Pause Scraping';
                    continueScrapeButton.classList.remove('btn-secondary');
                    continueScrapeButton.classList.add('btn-warning');

                    fetch('/Scraper/ContinueScrapingUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(errorContainer);
                            }

                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during continuing scraping:', error);

                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during continuing scraping.';
                            continueScrapeButton.parentElement.appendChild(errorContainer);

                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;
                        });
                } else {
                    alert('Continuing scraping process paused by user.');
                    continueScrapeButton.textContent = 'Continue Scraping Reports';
                    continueScrapeButton.classList.remove('btn-warning');
                    continueScrapeButton.classList.add('btn-secondary');
                    isContinuingScraping = false;
                }
            });

            // Handle Parse and Save XBRL Data button
            const parseXbrlBtn = document.getElementById('parseXbrlBtn');
            const parseXbrlResult = document.getElementById('parseXbrlResult');
            const parseXbrlLoading = document.getElementById('parseXbrlLoading');

            parseXbrlBtn.addEventListener('click', function () {
                const button = this;
                button.disabled = true;
                parseXbrlLoading.style.display = 'inline-block';
                parseXbrlResult.innerHTML = 'Processing...';

                fetch('/Scraper/ParseAndSaveXbrlData', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({})
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            parseXbrlResult.innerHTML = `<span class="text-success">${data.message}</span>`;
                        } else {
                            parseXbrlResult.innerHTML = `<span class="text-danger">${data.message}</span>`;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        parseXbrlResult.innerHTML = '<span class="text-danger">An unexpected error occurred.</span>';
                    })
                    .finally(() => {
                        button.disabled = false;
                        parseXbrlLoading.style.display = 'none';
                    });
            });

            // Handle Count Numerical Values button
            const countNumericalValuesBtn = document.getElementById('countNumericalValuesBtn');
            const countResult = document.getElementById('countResult');

            countNumericalValuesBtn.addEventListener('click', function () {
                countNumericalValuesBtn.disabled = true;
                countResult.innerHTML = '<span class="text-info">Counting numerical values...</span>';

                fetch('/Scraper/CountNumericalValues', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server error: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.Count !== undefined) {
                        countResult.innerHTML = `<span class="text-success">Total Numerical Values Counted: ${data.Count}</span>`;
                    } else {
                        countResult.innerHTML = '<span class="text-danger">Unexpected response from the server.</span>';
                    }
                })
                .catch(error => {
                    console.error('Error counting numerical values:', error);
                    countResult.innerHTML = '<span class="text-danger">An error occurred while counting numerical values.</span>';
                })
                .finally(() => {
                    countNumericalValuesBtn.disabled = false;
                });
            });

            // Handle Extract and Display Unique XBRL Elements button
            const extractXbrlElementsBtn = document.getElementById('extractXbrlElementsBtn');
            const uniqueXbrlElementsResult = document.getElementById('uniqueXbrlElementsResult');

            extractXbrlElementsBtn.addEventListener('click', function () {
                extractXbrlElementsBtn.disabled = true;
                uniqueXbrlElementsResult.innerHTML = '<span class="text-info">Extracting unique XBRL elements...</span>';

                fetch('/api/scraper/unique-xbrl-elements', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const elements = data.elements;
                        if (elements.length > 0) {
                            let html = '<h4>Unique XBRL Elements:</h4><ul class="list-group">';
                            elements.forEach(element => {
                                html += `<li class="list-group-item">${element}</li>`;
                            });
                            html += '</ul>';
                            uniqueXbrlElementsResult.innerHTML = html;
                        } else {
                            uniqueXbrlElementsResult.innerHTML = '<span class="text-warning">No unique XBRL elements found.</span>';
                        }
                    } else {
                        uniqueXbrlElementsResult.innerHTML = `<span class="text-danger">${data.message}</span>`;
                    }
                })
                .catch(error => {
                    console.error('Error extracting unique XBRL elements:', error);
                    uniqueXbrlElementsResult.innerHTML = '<span class="text-danger">An error occurred while extracting XBRL elements.</span>';
                })
                .finally(() => {
                    extractXbrlElementsBtn.disabled = false;
                });
            });

            // Helper function to get Anti-Forgery Token (if CSRF protection is enabled)
            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            // Handle company search input for suggestions
            const companySearchInput = document.getElementById('CompanySearch');
            const suggestionsContainer = document.getElementById('suggestions');
            const selectedCompaniesList = document.getElementById('selectedCompaniesList');
            const hiddenCompanySymbolInput = document.querySelector('input[name="CompanySymbol"]');

            companySearchInput.addEventListener('input', function () {
                const query = this.value.trim();

                if (query.length >= 2) {
                    fetch(`/api/companies/search?query=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            suggestionsContainer.innerHTML = '';
                            if (data.length > 0) {
                                data.forEach(company => {
                                    const suggestionItem = document.createElement('a');
                                    suggestionItem.classList.add('list-group-item', 'list-group-item-action');
                                    suggestionItem.textContent = `${company.companyName} (${company.companySymbol})`;

                                    suggestionItem.addEventListener('click', function () {
                                        selectedCompaniesList.innerHTML = '';

                                        const listItem = document.createElement('li');
                                        listItem.classList.add('list-group-item');
                                        listItem.textContent = `${company.companyName} (${company.companySymbol})`;
                                        listItem.dataset.symbol = company.companySymbol;
                                        selectedCompaniesList.appendChild(listItem);

                                        hiddenCompanySymbolInput.value = company.companySymbol;
                                        companySearchInput.value = '';
                                        suggestionsContainer.innerHTML = '';
                                    });
                                    suggestionsContainer.appendChild(suggestionItem);
                                });
                            } else {
                                const noResultsItem = document.createElement('div');
                                noResultsItem.classList.add('list-group-item');
                                noResultsItem.textContent = 'No results found';
                                suggestionsContainer.appendChild(noResultsItem);
                            }
                        })
                        .catch(error => console.error('Error fetching suggestions:', error));
                } else {
                    suggestionsContainer.innerHTML = '';
                }
            });

            // Handle removing the selected company from the list
            const removeCompanyButton = document.getElementById('removeCompany');
            removeCompanyButton.addEventListener('click', function () {
                const selectedCompanyItem = selectedCompaniesList.querySelector('li');
                if (selectedCompanyItem) {
                    const companySymbol = selectedCompanyItem.getAttribute('data-symbol');
                    fetch('/Scraper/RemoveSelectedCompany', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ companySymbol: companySymbol })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                selectedCompaniesList.removeChild(selectedCompanyItem);
                                hiddenCompanySymbolInput.value = '';
                            } else {
                                alert(data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error removing company:', error);
                            alert('An error occurred while removing the company.');
                        });
                } else {
                    alert('Please select a company to remove.');
                }
            });

            // Reload company counts periodically (e.g., every 5 minutes)
            setInterval(loadCompanyCounts, 300000);
        });
    </script>

    <!-- Include Bootstrap JS for better UI (if not already included) -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"
            integrity="sha384-LtrjvnR4Twt/qOuYx+vQy8haBBN8d1Y5lrogr4+17F6Dz8uK6rfsQbLX7hg/KjMG"
            crossorigin="anonymous"></script>
}

@* @model StockDataWebsite.Models.CompanySelection

@{
    ViewData["Title"] = "Scraper Page";
}

<h2>Select a Company for SEC Reports</h2>

<!-- Display the total number of scraped and unscraped companies -->
<h4>Total number of scraped companies in database: <span id="scrapedCompaniesCount">Loading...</span></h4>
<h4>Total number of unscraped companies: <span id="unscrapedCompaniesCount">Loading...</span></h4>

<!-- Form for scraping reports -->
<form asp-action="Scrape" method="post">
    <div class="form-group">
        <label for="CompanySearch">Search by Company Name or Symbol</label>
        <input type="text" class="form-control" id="CompanySearch" asp-for="CompanyName" placeholder="Enter company name or symbol" autocomplete="off" required />
        <input type="hidden" asp-for="CompanySymbol" /> <!-- Hidden input for CompanySymbol -->
        <div id="suggestions" class="list-group"></div>
    </div>

    <!-- Selected companies list -->
    <div class="form-group">
        <label for="selectedCompaniesList">Selected Companies</label>
        <ul id="selectedCompaniesList" class="list-group">
            <!-- Pre-populate the selected company if present in the Model -->
            @if (Model != null && !string.IsNullOrEmpty(Model.CompanySymbol))
            {
                <li class="list-group-item" data-symbol="@Model.CompanySymbol">
                    @Model.CompanyName (@Model.CompanySymbol)
                </li>
            }
        </ul>
    </div>

    <!-- Button to remove a selected company from the list -->
    <button type="button" id="removeCompany" class="btn btn-danger custom-margin">Remove Selected Company</button>

    <button type="submit" class="btn btn-primary custom-margin">Scrape Reports</button>
</form>

<div asp-validation-summary="ModelOnly" class="text-danger"></div> <!-- Model-wide validation errors -->
<!-- Form for fetching stock info -->
<form asp-action="FetchStockInfo" asp-controller="StockInfo" method="post">
    <button type="submit" class="btn btn-primary custom-margin">Update CompaniesList.dbo</button>
</form>

<!-- Buttons for scraping reports -->
<div class="mt-3">
    <!-- Button to scrape unscraped reports -->
    <button id="scrapeUnscrapedReports" class="btn btn-primary custom-margin">Scrape Unscraped Reports</button>

    <!-- New Button: Continue Scraping Reports -->
    <button id="continueScrapingReports" class="btn btn-secondary custom-margin">Continue Scraping Reports</button>
    <button id="countNumericalValuesBtn" class="btn btn-info custom-margin">Count Numerical Values</button>
    <div id="countResult" class="mt-2"></div>
    <!-- New Button: Parse and Save XBRL Data -->
    <button id="parseXbrlBtn" class="btn btn-success custom-margin">Parse and Save XBRL Name Data</button>
    <div id="parseXbrlResult" class="mt-2"></div>
    <div id="parseXbrlLoading" class="spinner-border text-primary mt-2" role="status" style="display: none;">
        <span class="sr-only">Loading...</span>
    </div>
</div>

<!-- New Section: Extract and Display Unique XBRL Elements -->
<div class="mt-3">
    <button id="extractXbrlElementsBtn" class="btn btn-warning custom-margin">Extract Unique XBRL Elements</button>
    <div id="uniqueXbrlElementsResult" class="mt-3"></div>
</div>

@if (ViewBag.Result != null)
{
    <div class="alert alert-success mt-3">
        @ViewBag.Result
    </div>
}

<!-- JavaScript for dynamic dropdown suggestions, handling selection/removal, and loading counts -->
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Function to fetch and display company counts
            function loadCompanyCounts() {
                fetch('/api/companies/counts')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('scrapedCompaniesCount').textContent = data.scrapedCompaniesCount;
                        document.getElementById('unscrapedCompaniesCount').textContent = data.unscrapedCompaniesCount;
                    })
                    .catch(error => {
                        console.error('Error fetching counts:', error);
                        document.getElementById('scrapedCompaniesCount').textContent = 'Error';
                        document.getElementById('unscrapedCompaniesCount').textContent = 'Error';
                    });
            }

            // Initial load of company counts
            loadCompanyCounts();

            // Handle Scrape Unscraped Reports button
            const scrapeButton = document.getElementById('scrapeUnscrapedReports');
            let isScraping = false;

            scrapeButton.addEventListener('click', function () {
                if (!isScraping) {
                    isScraping = true;
                    scrapeButton.textContent = 'Stop Scraping';
                    scrapeButton.classList.remove('btn-primary');
                    scrapeButton.classList.add('btn-danger');

                    // Start scraping via API
                    fetch('/Scraper/ScrapeUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // Include CSRF token if necessary
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Show success message dynamically
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                // Show error message dynamically
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(errorContainer);
                            }

                            // Reset button state
                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;

                            // Reload company counts
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during scraping:', error);

                            // Show error message dynamically
                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during scraping.';
                            scrapeButton.parentElement.appendChild(errorContainer);

                            // Reset button state
                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;
                        });
                } else {
                    // Stop scraping logic (optional, if applicable)
                    alert('Scraping process stopped by user.');
                    scrapeButton.textContent = 'Scrape Unscraped Reports';
                    scrapeButton.classList.remove('btn-danger');
                    scrapeButton.classList.add('btn-primary');
                    isScraping = false;
                }
            });

            // Handle Continue Scraping Reports button
            const continueScrapeButton = document.getElementById('continueScrapingReports');
            let isContinuingScraping = false;

            continueScrapeButton.addEventListener('click', function () {
                if (!isContinuingScraping) {
                    isContinuingScraping = true;
                    continueScrapeButton.textContent = 'Pause Scraping';
                    continueScrapeButton.classList.remove('btn-secondary');
                    continueScrapeButton.classList.add('btn-warning');

                    // Continue scraping via API
                    fetch('/Scraper/ContinueScrapingUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // Include CSRF token if necessary
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Show success message dynamically
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                // Show error message dynamically
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(errorContainer);
                            }

                            // Reset button state
                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;

                            // Reload company counts
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during continuing scraping:', error);

                            // Show error message dynamically
                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during continuing scraping.';
                            continueScrapeButton.parentElement.appendChild(errorContainer);

                            // Reset button state
                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;
                        });
                } else {
                    // Pause continuing scraping logic (optional, if applicable)
                    alert('Continuing scraping process paused by user.');
                    continueScrapeButton.textContent = 'Continue Scraping Reports';
                    continueScrapeButton.classList.remove('btn-warning');
                    continueScrapeButton.classList.add('btn-secondary');
                    isContinuingScraping = false;
                }
            });

            // Handle Parse and Save XBRL Data button
            const parseXbrlBtn = document.getElementById('parseXbrlBtn');
            const parseXbrlResult = document.getElementById('parseXbrlResult');
            const parseXbrlLoading = document.getElementById('parseXbrlLoading');

            parseXbrlBtn.addEventListener('click', function () {
                const button = this;

                // Disable the button and show loading spinner
                button.disabled = true;
                parseXbrlLoading.style.display = 'inline-block';
                parseXbrlResult.innerHTML = 'Processing...';

                fetch('/Scraper/ParseAndSaveXbrlData', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({})
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            parseXbrlResult.innerHTML = `<span class="text-success">${data.message}</span>`;
                        } else {
                            parseXbrlResult.innerHTML = `<span class="text-danger">${data.message}</span>`;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        parseXbrlResult.innerHTML = '<span class="text-danger">An unexpected error occurred.</span>';
                    })
                    .finally(() => {
                        // Re-enable the button and hide loading spinner
                        button.disabled = false;
                        parseXbrlLoading.style.display = 'none';
                    });
            });

            // Handle Count Numerical Values button
            const countNumericalValuesBtn = document.getElementById('countNumericalValuesBtn');
            const countResult = document.getElementById('countResult');

            countNumericalValuesBtn.addEventListener('click', function () {
                // Disable the button to prevent multiple clicks
                countNumericalValuesBtn.disabled = true;
                countResult.innerHTML = '<span class="text-info">Counting numerical values...</span>';

                fetch('/Scraper/CountNumericalValues', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server error: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.Count !== undefined) {
                        countResult.innerHTML = `<span class="text-success">Total Numerical Values Counted: ${data.Count}</span>`;
                    } else {
                        countResult.innerHTML = '<span class="text-danger">Unexpected response from the server.</span>';
                    }
                })
                .catch(error => {
                    console.error('Error counting numerical values:', error);
                    countResult.innerHTML = '<span class="text-danger">An error occurred while counting numerical values.</span>';
                })
                .finally(() => {
                    // Re-enable the button after the operation completes
                    countNumericalValuesBtn.disabled = false;
                });
            });

            // Handle Extract and Display Unique XBRL Elements button
            const extractXbrlElementsBtn = document.getElementById('extractXbrlElementsBtn');
            const uniqueXbrlElementsResult = document.getElementById('uniqueXbrlElementsResult');

            extractXbrlElementsBtn.addEventListener('click', function () {
                // Disable the button to prevent multiple clicks
                extractXbrlElementsBtn.disabled = true;
                uniqueXbrlElementsResult.innerHTML = '<span class="text-info">Extracting unique XBRL elements...</span>';

                fetch('/api/scraper/unique-xbrl-elements', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const elements = data.elements;
                        if (elements.length > 0) {
                            let html = '<h4>Unique XBRL Elements:</h4><ul class="list-group">';
                            elements.forEach(element => {
                                html += `<li class="list-group-item">${element}</li>`;
                            });
                            html += '</ul>';
                            uniqueXbrlElementsResult.innerHTML = html;
                        } else {
                            uniqueXbrlElementsResult.innerHTML = '<span class="text-warning">No unique XBRL elements found.</span>';
                        }
                    } else {
                        uniqueXbrlElementsResult.innerHTML = `<span class="text-danger">${data.message}</span>`;
                    }
                })
                .catch(error => {
                    console.error('Error extracting unique XBRL elements:', error);
                    uniqueXbrlElementsResult.innerHTML = '<span class="text-danger">An error occurred while extracting XBRL elements.</span>';
                })
                .finally(() => {
                    // Re-enable the button after the operation completes
                    extractXbrlElementsBtn.disabled = false;
                });
            });

            // Helper function to get Anti-Forgery Token (if CSRF protection is enabled)
            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            // Handle company search input for suggestions
            const companySearchInput = document.getElementById('CompanySearch');
            const suggestionsContainer = document.getElementById('suggestions');
            const selectedCompaniesList = document.getElementById('selectedCompaniesList');
            const hiddenCompanySymbolInput = document.querySelector('input[name="CompanySymbol"]');

            companySearchInput.addEventListener('input', function () {
                const query = this.value.trim();

                if (query.length >= 2) {
                    fetch(`/api/companies/search?query=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            suggestionsContainer.innerHTML = ''; // Clear previous suggestions

                            if (data.length > 0) {
                                data.forEach(company => {
                                    const suggestionItem = document.createElement('a');
                                    suggestionItem.classList.add('list-group-item', 'list-group-item-action');
                                    suggestionItem.textContent = `${company.companyName} (${company.companySymbol})`;

                                    suggestionItem.addEventListener('click', function () {
                                        // Clear any existing selections
                                        selectedCompaniesList.innerHTML = '';

                                        // Create and append the selected company list item
                                        const listItem = document.createElement('li');
                                        listItem.classList.add('list-group-item');
                                        listItem.textContent = `${company.companyName} (${company.companySymbol})`;
                                        listItem.dataset.symbol = company.companySymbol;

                                        selectedCompaniesList.appendChild(listItem);

                                        // Populate the hidden field for CompanySymbol
                                        hiddenCompanySymbolInput.value = company.companySymbol;

                                        // Clear search field and suggestions
                                        companySearchInput.value = '';
                                        suggestionsContainer.innerHTML = '';
                                    });

                                    suggestionsContainer.appendChild(suggestionItem);
                                });
                            } else {
                                const noResultsItem = document.createElement('div');
                                noResultsItem.classList.add('list-group-item');
                                noResultsItem.textContent = 'No results found';
                                suggestionsContainer.appendChild(noResultsItem);
                            }
                        })
                        .catch(error => console.error('Error fetching suggestions:', error));
                } else {
                    suggestionsContainer.innerHTML = ''; // Clear suggestions if query is too short
                }
            });

            // Handle removing the selected company from the list
            const removeCompanyButton = document.getElementById('removeCompany');
            removeCompanyButton.addEventListener('click', function () {
                const selectedCompanyItem = selectedCompaniesList.querySelector('li');

                if (selectedCompanyItem) {
                    const companySymbol = selectedCompanyItem.getAttribute('data-symbol');

                    fetch('/Scraper/RemoveSelectedCompany', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken() // Ensure CSRF protection
                        },
                        body: JSON.stringify({ companySymbol: companySymbol })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                selectedCompaniesList.removeChild(selectedCompanyItem);
                                hiddenCompanySymbolInput.value = ''; // Clear the hidden input
                            } else {
                                alert(data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error removing company:', error);
                            alert('An error occurred while removing the company.');
                        });
                } else {
                    alert('Please select a company to remove.');
                }
            });

            // Optional: Reload company counts periodically (e.g., every 5 minutes)
            setInterval(loadCompanyCounts, 300000); // 300,000 ms = 5 minutes
        });
    </script>

    <!-- Include Bootstrap JS for better UI (if not already included) -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"
            integrity="sha384-LtrjvnR4Twt/qOuYx+vQy8haBBN8d1Y5lrogr4+17F6Dz8uK6rfsQbLX7hg/KjMG"
            crossorigin="anonymous"></script>
}
 *@




@* @model StockDataWebsite.Models.CompanySelection

@{
    ViewData["Title"] = "Scraper Page";
}

<h2>Select a Company for SEC Reports</h2>

<!-- Display the total number of scraped and unscraped companies -->
<h4>Total number of scraped companies in database: <span id="scrapedCompaniesCount">Loading...</span></h4>
<h4>Total number of unscraped companies: <span id="unscrapedCompaniesCount">Loading...</span></h4>

<!-- Form for scraping reports -->
<form asp-action="Scrape" method="post">
    <div class="form-group">
        <label for="CompanySearch">Search by Company Name or Symbol</label>
        <input type="text" class="form-control" id="CompanySearch" asp-for="CompanyName" placeholder="Enter company name or symbol" autocomplete="off" required />
        <input type="hidden" asp-for="CompanySymbol" /> <!-- Hidden input for CompanySymbol -->
        <div id="suggestions" class="list-group"></div>
    </div>

    <!-- Selected companies list -->
    <div class="form-group">
        <label for="selectedCompaniesList">Selected Companies</label>
        <ul id="selectedCompaniesList" class="list-group">
            <!-- Pre-populate the selected company if present in the Model -->
            @if (Model != null && !string.IsNullOrEmpty(Model.CompanySymbol))
            {
                <li class="list-group-item" data-symbol="@Model.CompanySymbol">
                    @Model.CompanyName (@Model.CompanySymbol)
                </li>
            }
        </ul>
    </div>

    <!-- Button to remove a selected company from the list -->
    <button type="button" id="removeCompany" class="btn btn-danger custom-margin">Remove Selected Company</button>

    <button type="submit" class="btn btn-primary custom-margin">Scrape Reports</button>
</form>

<div asp-validation-summary="ModelOnly" class="text-danger"></div> <!-- Model-wide validation errors -->
<!-- Form for fetching stock info -->
<form asp-action="FetchStockInfo" asp-controller="StockInfo" method="post">
    <button type="submit" class="btn btn-primary custom-margin">Update CompaniesList.dbo</button>
</form>

<!-- Buttons for scraping reports -->
<div class="mt-3">
    <!-- Button to scrape unscraped reports -->
    <button id="scrapeUnscrapedReports" class="btn btn-primary custom-margin">Scrape Unscraped Reports</button>

    <!-- New Button: Continue Scraping Reports -->
    <button id="continueScrapingReports" class="btn btn-secondary custom-margin">Continue Scraping Reports</button>
    <button id="countNumericalValuesBtn" class="btn btn-info custom-margin">Count Numerical Values</button>
    <div id="countResult" class="mt-2"></div>
    <!-- New Button: Parse and Save XBRL Data -->
    <button id="parseXbrlBtn" class="btn btn-success custom-margin">Parse and Save XBRL Name Data</button>
    <div id="parseXbrlResult" class="mt-2"></div>
    <div id="parseXbrlLoading" class="spinner-border text-primary mt-2" role="status" style="display: none;">
        <span class="sr-only">Loading...</span>
    </div>
</div>

@if (ViewBag.Result != null)
{
    <div class="alert alert-success mt-3">
        @ViewBag.Result
    </div>
}

<!-- JavaScript for dynamic dropdown suggestions, handling selection/removal, and loading counts -->
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Function to fetch and display company counts
            function loadCompanyCounts() {
                fetch('/api/companies/counts')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('scrapedCompaniesCount').textContent = data.scrapedCompaniesCount;
                        document.getElementById('unscrapedCompaniesCount').textContent = data.unscrapedCompaniesCount;
                    })
                    .catch(error => {
                        console.error('Error fetching counts:', error);
                        document.getElementById('scrapedCompaniesCount').textContent = 'Error';
                        document.getElementById('unscrapedCompaniesCount').textContent = 'Error';
                    });
            }

            // Initial load of company counts
            loadCompanyCounts();

            // Handle Scrape Unscraped Reports button
            const scrapeButton = document.getElementById('scrapeUnscrapedReports');
            let isScraping = false;

            scrapeButton.addEventListener('click', function () {
                if (!isScraping) {
                    isScraping = true;
                    scrapeButton.textContent = 'Stop Scraping';
                    scrapeButton.classList.remove('btn-primary');
                    scrapeButton.classList.add('btn-danger');

                    // Start scraping via API
                    fetch('/Scraper/ScrapeUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // Include CSRF token if necessary
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Show success message dynamically
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                // Show error message dynamically
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(errorContainer);
                            }

                            // Reset button state
                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;

                            // Reload company counts
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during scraping:', error);

                            // Show error message dynamically
                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during scraping.';
                            scrapeButton.parentElement.appendChild(errorContainer);

                            // Reset button state
                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;
                        });
                } else {
                    // Stop scraping logic (optional, if applicable)
                    alert('Scraping process stopped by user.');
                    scrapeButton.textContent = 'Scrape Unscraped Reports';
                    scrapeButton.classList.remove('btn-danger');
                    scrapeButton.classList.add('btn-primary');
                    isScraping = false;
                }
            });

            // Handle Continue Scraping Reports button
            const continueScrapeButton = document.getElementById('continueScrapingReports');
            let isContinuingScraping = false;

            continueScrapeButton.addEventListener('click', function () {
                if (!isContinuingScraping) {
                    isContinuingScraping = true;
                    continueScrapeButton.textContent = 'Pause Scraping';
                    continueScrapeButton.classList.remove('btn-secondary');
                    continueScrapeButton.classList.add('btn-warning');

                    // Continue scraping via API
                    fetch('/Scraper/ContinueScrapingUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // Include CSRF token if necessary
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Show success message dynamically
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                // Show error message dynamically
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(errorContainer);
                            }

                            // Reset button state
                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;

                            // Reload company counts
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during continuing scraping:', error);

                            // Show error message dynamically
                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during continuing scraping.';
                            continueScrapeButton.parentElement.appendChild(errorContainer);

                            // Reset button state
                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;
                        });
                } else {
                    // Pause continuing scraping logic (optional, if applicable)
                    alert('Continuing scraping process paused by user.');
                    continueScrapeButton.textContent = 'Continue Scraping Reports';
                    continueScrapeButton.classList.remove('btn-warning');
                    continueScrapeButton.classList.add('btn-secondary');
                    isContinuingScraping = false;
                }
            });

            // Handle Parse and Save XBRL Data button
            const parseXbrlBtn = document.getElementById('parseXbrlBtn');
            const parseXbrlResult = document.getElementById('parseXbrlResult');
            const parseXbrlLoading = document.getElementById('parseXbrlLoading');

            parseXbrlBtn.addEventListener('click', function () {
                const button = this;

                // Disable the button and show loading spinner
                button.disabled = true;
                parseXbrlLoading.style.display = 'inline-block';
                parseXbrlResult.innerHTML = 'Processing...';

                fetch('/Scraper/ParseAndSaveXbrlData', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({})
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            parseXbrlResult.innerHTML = `<span class="text-success">${data.message}</span>`;
                        } else {
                            parseXbrlResult.innerHTML = `<span class="text-danger">${data.message}</span>`;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        parseXbrlResult.innerHTML = '<span class="text-danger">An unexpected error occurred.</span>';
                    })
                    .finally(() => {
                        // Re-enable the button and hide loading spinner
                        button.disabled = false;
                        parseXbrlLoading.style.display = 'none';
                    });
            });

            // Handle Count Numerical Values button
            const countNumericalValuesBtn = document.getElementById('countNumericalValuesBtn');
            const countResult = document.getElementById('countResult');

            countNumericalValuesBtn.addEventListener('click', function () {
                // Disable the button to prevent multiple clicks
                countNumericalValuesBtn.disabled = true;
                countResult.innerHTML = '<span class="text-info">Counting numerical values...</span>';

                fetch('/Scraper/CountNumericalValues', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server error: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.Count !== undefined) {
                        countResult.innerHTML = `<span class="text-success">Total Numerical Values Counted: ${data.Count}</span>`;
                    } else {
                        countResult.innerHTML = '<span class="text-danger">Unexpected response from the server.</span>';
                    }
                })
                .catch(error => {
                    console.error('Error counting numerical values:', error);
                    countResult.innerHTML = '<span class="text-danger">An error occurred while counting numerical values.</span>';
                })
                .finally(() => {
                    // Re-enable the button after the operation completes
                    countNumericalValuesBtn.disabled = false;
                });
            });

            // Helper function to get Anti-Forgery Token (if CSRF protection is enabled)
            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            // Handle company search input for suggestions
            const companySearchInput = document.getElementById('CompanySearch');
            const suggestionsContainer = document.getElementById('suggestions');
            const selectedCompaniesList = document.getElementById('selectedCompaniesList');
            const hiddenCompanySymbolInput = document.querySelector('input[name="CompanySymbol"]');

            companySearchInput.addEventListener('input', function () {
                const query = this.value.trim();

                if (query.length >= 2) {
                    fetch(`/api/companies/search?query=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            suggestionsContainer.innerHTML = ''; // Clear previous suggestions

                            if (data.length > 0) {
                                data.forEach(company => {
                                    const suggestionItem = document.createElement('a');
                                    suggestionItem.classList.add('list-group-item', 'list-group-item-action');
                                    suggestionItem.textContent = `${company.companyName} (${company.companySymbol})`;

                                    suggestionItem.addEventListener('click', function () {
                                        // Clear any existing selections
                                        selectedCompaniesList.innerHTML = '';

                                        // Create and append the selected company list item
                                        const listItem = document.createElement('li');
                                        listItem.classList.add('list-group-item');
                                        listItem.textContent = `${company.companyName} (${company.companySymbol})`;
                                        listItem.dataset.symbol = company.companySymbol;

                                        selectedCompaniesList.appendChild(listItem);

                                        // Populate the hidden field for CompanySymbol
                                        hiddenCompanySymbolInput.value = company.companySymbol;

                                        // Clear search field and suggestions
                                        companySearchInput.value = '';
                                        suggestionsContainer.innerHTML = '';
                                    });

                                    suggestionsContainer.appendChild(suggestionItem);
                                });
                            } else {
                                const noResultsItem = document.createElement('div');
                                noResultsItem.classList.add('list-group-item');
                                noResultsItem.textContent = 'No results found';
                                suggestionsContainer.appendChild(noResultsItem);
                            }
                        })
                        .catch(error => console.error('Error fetching suggestions:', error));
                } else {
                    suggestionsContainer.innerHTML = ''; // Clear suggestions if query is too short
                }
            });

            // Handle removing the selected company from the list
            // Handle removing the selected company from the list
// Handle removing the selected company from the list
const removeCompanyButton = document.getElementById('removeCompany');
removeCompanyButton.addEventListener('click', function () {
    const selectedCompanyItem = selectedCompaniesList.querySelector('li');

    if (selectedCompanyItem) {
        const companySymbol = selectedCompanyItem.getAttribute('data-symbol');

        fetch('/Scraper/RemoveSelectedCompany', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getAntiForgeryToken() // Ensure CSRF protection
            },
            body: JSON.stringify({ companySymbol: companySymbol })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    selectedCompaniesList.removeChild(selectedCompanyItem);
                    hiddenCompanySymbolInput.value = ''; // Clear the hidden input
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('Error removing company:', error);
                alert('An error occurred while removing the company.');
            });
    } else {
        alert('Please select a company to remove.');
    }
});




            // Optional: Reload company counts periodically (e.g., every 5 minutes)
            setInterval(loadCompanyCounts, 300000); // 300,000 ms = 5 minutes
        });
    </script>

    <!-- Include Bootstrap JS for better UI (if not already included) -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"
            integrity="sha384-LtrjvnR4Twt/qOuYx+vQy8haBBN8d1Y5lrogr4+17F6Dz8uK6rfsQbLX7hg/KjMG"
            crossorigin="anonymous"></script>
}

 *@


@* @model StockDataWebsite.Models.CompanySelection

@{
    ViewData["Title"] = "Scraper Page";
}

<h2>Select a Company for SEC Reports</h2>

<!-- Display the total number of scraped and unscraped companies -->
<h4>Total number of scraped companies in database: <span id="scrapedCompaniesCount">Loading...</span></h4>
<h4>Total number of unscraped companies: <span id="unscrapedCompaniesCount">Loading...</span></h4>

<!-- Form for scraping reports -->
<form asp-action="Scrape" method="post">
    <div class="form-group">
        <label for="CompanySearch">Search by Company Name or Symbol</label>
        <input type="text" class="form-control" id="CompanySearch" asp-for="CompanyName" placeholder="Enter company name or symbol" autocomplete="off" required />
        <input type="hidden" asp-for="CompanySymbol" /> <!-- Hidden input for CompanySymbol -->
        <div id="suggestions" class="list-group"></div>
    </div>

    <!-- Selected companies list -->
    <div class="form-group">
        <label for="selectedCompaniesList">Selected Companies</label>
        <ul id="selectedCompaniesList" class="list-group">
            <!-- Pre-populate the selected company if present in the Model -->
            @if (Model != null && !string.IsNullOrEmpty(Model.CompanySymbol))
            {
                <li class="list-group-item" data-symbol="@Model.CompanySymbol">
                    @Model.CompanyName (@Model.CompanySymbol)
                </li>
            }
        </ul>
    </div>

    <!-- Button to remove a selected company from the list -->
    <button type="button" id="removeCompany" class="btn btn-danger custom-margin">Remove Selected Company</button>

    <button type="submit" class="btn btn-primary custom-margin">Scrape Reports</button>
</form>

<div asp-validation-summary="ModelOnly" class="text-danger"></div> <!-- Model-wide validation errors -->
<!-- Form for fetching stock info -->
<form asp-action="FetchStockInfo" asp-controller="StockInfo" method="post">
    <button type="submit" class="btn btn-primary custom-margin">Update CompaniesList.dbo</button>
</form>

<!-- Buttons for scraping reports -->
<div class="mt-3">
    <!-- Button to scrape unscraped reports -->
    <button id="scrapeUnscrapedReports" class="btn btn-primary custom-margin">Scrape Unscraped Reports</button>

    <!-- New Button: Continue Scraping Reports -->
    <button id="continueScrapingReports" class="btn btn-secondary custom-margin">Continue Scraping Reports</button>
    <button id="countNumericalValuesBtn" class="btn btn-info custom-margin">Count Numerical Values</button>
    <div id="countResult" class="mt-2"></div>
    <!-- New Button: Parse and Save XBRL Data -->
    <button id="parseXbrlBtn" class="btn btn-success custom-margin">Parse and Save XBRL Name Data</button>
    <div id="parseXbrlResult" class="mt-2"></div>
    <div id="parseXbrlLoading" class="spinner-border text-primary mt-2" role="status" style="display: none;">
        <span class="sr-only">Loading...</span>
    </div>
</div>

@if (ViewBag.Result != null)
{
    <div class="alert alert-success mt-3">
        @ViewBag.Result
    </div>
}

<!-- JavaScript for dynamic dropdown suggestions, handling selection/removal, and loading counts -->
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Function to fetch and display company counts
            function loadCompanyCounts() {
                fetch('/api/companies/counts')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('scrapedCompaniesCount').textContent = data.scrapedCompaniesCount;
                        document.getElementById('unscrapedCompaniesCount').textContent = data.unscrapedCompaniesCount;
                    })
                    .catch(error => {
                        console.error('Error fetching counts:', error);
                        document.getElementById('scrapedCompaniesCount').textContent = 'Error';
                        document.getElementById('unscrapedCompaniesCount').textContent = 'Error';
                    });
            }

            // Initial load of company counts
            loadCompanyCounts();

            // Handle Scrape Unscraped Reports button
            const scrapeButton = document.getElementById('scrapeUnscrapedReports');
            let isScraping = false;

            scrapeButton.addEventListener('click', function () {
                if (!isScraping) {
                    isScraping = true;
                    scrapeButton.textContent = 'Stop Scraping';
                    scrapeButton.classList.remove('btn-primary');
                    scrapeButton.classList.add('btn-danger');

                    // Start scraping via API
                    fetch('/Scraper/ScrapeUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // Include CSRF token if necessary
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Show success message dynamically
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                // Show error message dynamically
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(errorContainer);
                            }

                            // Reset button state
                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;

                            // Reload company counts
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during scraping:', error);

                            // Show error message dynamically
                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during scraping.';
                            scrapeButton.parentElement.appendChild(errorContainer);

                            // Reset button state
                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;
                        });
                } else {
                    // Stop scraping logic (optional, if applicable)
                    alert('Scraping process stopped by user.');
                    scrapeButton.textContent = 'Scrape Unscraped Reports';
                    scrapeButton.classList.remove('btn-danger');
                    scrapeButton.classList.add('btn-primary');
                    isScraping = false;
                }
            });

            // Handle Continue Scraping Reports button
            const continueScrapeButton = document.getElementById('continueScrapingReports');
            let isContinuingScraping = false;

            continueScrapeButton.addEventListener('click', function () {
                if (!isContinuingScraping) {
                    isContinuingScraping = true;
                    continueScrapeButton.textContent = 'Pause Scraping';
                    continueScrapeButton.classList.remove('btn-secondary');
                    continueScrapeButton.classList.add('btn-warning');

                    // Continue scraping via API
                    fetch('/Scraper/ContinueScrapingUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // Include CSRF token if necessary
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Show success message dynamically
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                // Show error message dynamically
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(errorContainer);
                            }

                            // Reset button state
                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;

                            // Reload company counts
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during continuing scraping:', error);

                            // Show error message dynamically
                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during continuing scraping.';
                            continueScrapeButton.parentElement.appendChild(errorContainer);

                            // Reset button state
                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;
                        });
                } else {
                    // Pause continuing scraping logic (optional, if applicable)
                    alert('Continuing scraping process paused by user.');
                    continueScrapeButton.textContent = 'Continue Scraping Reports';
                    continueScrapeButton.classList.remove('btn-warning');
                    continueScrapeButton.classList.add('btn-secondary');
                    isContinuingScraping = false;
                }
            });

            // Handle Parse and Save XBRL Data button
            const parseXbrlBtn = document.getElementById('parseXbrlBtn');
            const parseXbrlResult = document.getElementById('parseXbrlResult');
            const parseXbrlLoading = document.getElementById('parseXbrlLoading');

            parseXbrlBtn.addEventListener('click', function () {
                const button = this;

                // Disable the button and show loading spinner
                button.disabled = true;
                parseXbrlLoading.style.display = 'inline-block';
                parseXbrlResult.innerHTML = 'Processing...';

                fetch('/Scraper/ParseAndSaveXbrlData', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({})
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            parseXbrlResult.innerHTML = `<span class="text-success">${data.message}</span>`;
                        } else {
                            parseXbrlResult.innerHTML = `<span class="text-danger">${data.message}</span>`;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        parseXbrlResult.innerHTML = '<span class="text-danger">An unexpected error occurred.</span>';
                    })
                    .finally(() => {
                        // Re-enable the button and hide loading spinner
                        button.disabled = false;
                        parseXbrlLoading.style.display = 'none';
                    });
            });

            // Helper function to get Anti-Forgery Token (if CSRF protection is enabled)
            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            // Handle company search input for suggestions
            const companySearchInput = document.getElementById('CompanySearch');
            const suggestionsContainer = document.getElementById('suggestions');
            const selectedCompaniesList = document.getElementById('selectedCompaniesList');
            const hiddenCompanySymbolInput = document.querySelector('input[name="CompanySymbol"]');

            companySearchInput.addEventListener('input', function () {
                const query = this.value.trim();

                if (query.length >= 2) {
                    fetch(`/api/companies/search?query=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            suggestionsContainer.innerHTML = ''; // Clear previous suggestions

                            if (data.length > 0) {
                                data.forEach(company => {
                                    const suggestionItem = document.createElement('a');
                                    suggestionItem.classList.add('list-group-item', 'list-group-item-action');
                                    suggestionItem.textContent = `${company.companyName} (${company.companySymbol})`;

                                    suggestionItem.addEventListener('click', function () {
                                        // Clear any existing selections
                                        selectedCompaniesList.innerHTML = '';

                                        // Create and append the selected company list item
                                        const listItem = document.createElement('li');
                                        listItem.classList.add('list-group-item');
                                        listItem.textContent = `${company.companyName} (${company.companySymbol})`;
                                        listItem.dataset.symbol = company.companySymbol;

                                        selectedCompaniesList.appendChild(listItem);

                                        // Populate the hidden field for CompanySymbol
                                        hiddenCompanySymbolInput.value = company.companySymbol;

                                        // Clear search field and suggestions
                                        companySearchInput.value = '';
                                        suggestionsContainer.innerHTML = '';
                                    });

                                    suggestionsContainer.appendChild(suggestionItem);
                                });
                            } else {
                                const noResultsItem = document.createElement('div');
                                noResultsItem.classList.add('list-group-item');
                                noResultsItem.textContent = 'No results found';
                                suggestionsContainer.appendChild(noResultsItem);
                            }
                        })
                        .catch(error => console.error('Error fetching suggestions:', error));
                } else {
                    suggestionsContainer.innerHTML = ''; // Clear suggestions if query is too short
                }
            });

            // Handle removing the selected company from the list
            const removeCompanyButton = document.getElementById('removeCompany');
            removeCompanyButton.addEventListener('click', function () {
                const selectedItem = document.querySelector('#selectedCompaniesList li');

                if (selectedItem) {
                    selectedCompaniesList.removeChild(selectedItem); // Remove the selected company
                    hiddenCompanySymbolInput.value = ''; // Clear the hidden input
                } else {
                    alert('Please select a company to remove.');
                }
            });

            // Optional: Reload company counts periodically (e.g., every 5 minutes)
            setInterval(loadCompanyCounts, 300000); // 300,000 ms = 5 minutes
        });
    </script>

    <!-- Include Bootstrap JS for better UI (if not already included) -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"
            integrity="sha384-LtrjvnR4Twt/qOuYx+vQy8haBBN8d1Y5lrogr4+17F6Dz8uK6rfsQbLX7hg/KjMG"
            crossorigin="anonymous"></script>
}
 *@




@* @model StockDataWebsite.Models.CompanySelection

@{
    ViewData["Title"] = "Scraper Page";
}

<h2>Select a Company for SEC Reports</h2>

<!-- Display the total number of scraped and unscraped companies -->
<h4>Total number of scraped companies in database: <span id="scrapedCompaniesCount">Loading...</span></h4>
<h4>Total number of unscraped companies: <span id="unscrapedCompaniesCount">Loading...</span></h4>

<!-- Form for scraping reports -->
<form asp-action="Scrape" method="post">
    <div class="form-group">
        <label for="CompanySearch">Search by Company Name or Symbol</label>
        <input type="text" class="form-control" id="CompanySearch" asp-for="CompanyName" placeholder="Enter company name or symbol" autocomplete="off" required />
        <input type="hidden" asp-for="CompanySymbol" /> <!-- Hidden input for CompanySymbol -->
        <div id="suggestions" class="list-group"></div>
    </div>

    <!-- Selected companies list -->
    <div class="form-group">
        <label for="selectedCompaniesList">Selected Companies</label>
        <ul id="selectedCompaniesList" class="list-group">
            <!-- Pre-populate the selected company if present in the Model -->
            @if (Model != null && !string.IsNullOrEmpty(Model.CompanySymbol))
            {
                <li class="list-group-item" data-symbol="@Model.CompanySymbol">
                    @Model.CompanyName (@Model.CompanySymbol)
                </li>
            }
        </ul>
    </div>

    <!-- Button to remove a selected company from the list -->
    <button type="button" id="removeCompany" class="btn btn-danger custom-margin">Remove Selected Company</button>

    <button type="submit" class="btn btn-primary custom-margin">Scrape Reports</button>
</form>

<div asp-validation-summary="ModelOnly" class="text-danger"></div> <!-- Model-wide validation errors -->
<!-- Form for fetching stock info -->
<form asp-action="FetchStockInfo" asp-controller="StockInfo" method="post">
    <button type="submit" class="btn btn-primary custom-margin">Update CompaniesList.dbo</button>
</form>

<!-- Buttons for scraping reports -->
<div class="mt-3">
    <!-- Button to scrape unscraped reports -->
    <button id="scrapeUnscrapedReports" class="btn btn-primary custom-margin">Scrape Unscraped Reports</button>

    <!-- New Button: Continue Scraping Reports -->
    <button id="continueScrapingReports" class="btn btn-secondary custom-margin">Continue Scraping Reports</button>
</div>

@if (ViewBag.Result != null)
{
    <div class="alert alert-success mt-3">
        @ViewBag.Result
    </div>
}

<!-- JavaScript for dynamic dropdown suggestions, handling selection/removal, and loading counts -->
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Function to fetch and display company counts
            function loadCompanyCounts() {
                fetch('/api/companies/counts')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('scrapedCompaniesCount').textContent = data.scrapedCompaniesCount;
                        document.getElementById('unscrapedCompaniesCount').textContent = data.unscrapedCompaniesCount;
                    })
                    .catch(error => {
                        console.error('Error fetching counts:', error);
                        document.getElementById('scrapedCompaniesCount').textContent = 'Error';
                        document.getElementById('unscrapedCompaniesCount').textContent = 'Error';
                    });
            }

            // Initial load of company counts
            loadCompanyCounts();

            // Handle Scrape Unscraped Reports button
            const scrapeButton = document.getElementById('scrapeUnscrapedReports');
            let isScraping = false;

            scrapeButton.addEventListener('click', function () {
                if (!isScraping) {
                    isScraping = true;
                    scrapeButton.textContent = 'Stop Scraping';
                    scrapeButton.classList.remove('btn-primary');
                    scrapeButton.classList.add('btn-danger');

                    // Start scraping via API
                    fetch('/Scraper/ScrapeUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // Include CSRF token if necessary
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Show success message dynamically
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                // Show error message dynamically
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                scrapeButton.parentElement.appendChild(errorContainer);
                            }

                            // Reset button state
                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;

                            // Reload company counts
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during scraping:', error);

                            // Show error message dynamically
                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during scraping.';
                            scrapeButton.parentElement.appendChild(errorContainer);

                            // Reset button state
                            scrapeButton.textContent = 'Scrape Unscraped Reports';
                            scrapeButton.classList.remove('btn-danger');
                            scrapeButton.classList.add('btn-primary');
                            isScraping = false;
                        });
                } else {
                    // Stop scraping logic (optional, if applicable)
                    alert('Scraping process stopped by user.');
                    scrapeButton.textContent = 'Scrape Unscraped Reports';
                    scrapeButton.classList.remove('btn-danger');
                    scrapeButton.classList.add('btn-primary');
                    isScraping = false;
                }
            });

            // Handle Continue Scraping Reports button
            const continueScrapeButton = document.getElementById('continueScrapingReports');
            let isContinuingScraping = false;

            continueScrapeButton.addEventListener('click', function () {
                if (!isContinuingScraping) {
                    isContinuingScraping = true;
                    continueScrapeButton.textContent = 'Pause Scraping';
                    continueScrapeButton.classList.remove('btn-secondary');
                    continueScrapeButton.classList.add('btn-warning');

                    // Continue scraping via API
                    fetch('/Scraper/ContinueScrapingUnscrapedReports', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // Include CSRF token if necessary
                            'RequestVerificationToken': getAntiForgeryToken()
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Show success message dynamically
                                const messageContainer = document.createElement('div');
                                messageContainer.classList.add('alert', 'alert-success', 'mt-3');
                                messageContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(messageContainer);
                            } else {
                                // Show error message dynamically
                                const errorContainer = document.createElement('div');
                                errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                                errorContainer.textContent = data.message;
                                continueScrapeButton.parentElement.appendChild(errorContainer);
                            }

                            // Reset button state
                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;

                            // Reload company counts
                            loadCompanyCounts();
                        })
                        .catch(error => {
                            console.error('Error during continuing scraping:', error);

                            // Show error message dynamically
                            const errorContainer = document.createElement('div');
                            errorContainer.classList.add('alert', 'alert-danger', 'mt-3');
                            errorContainer.textContent = 'An error occurred during continuing scraping.';
                            continueScrapeButton.parentElement.appendChild(errorContainer);

                            // Reset button state
                            continueScrapeButton.textContent = 'Continue Scraping Reports';
                            continueScrapeButton.classList.remove('btn-warning');
                            continueScrapeButton.classList.add('btn-secondary');
                            isContinuingScraping = false;
                        });
                } else {
                    // Pause continuing scraping logic (optional, if applicable)
                    alert('Continuing scraping process paused by user.');
                    continueScrapeButton.textContent = 'Continue Scraping Reports';
                    continueScrapeButton.classList.remove('btn-warning');
                    continueScrapeButton.classList.add('btn-secondary');
                    isContinuingScraping = false;
                }
            });

            // Helper function to get Anti-Forgery Token (if CSRF protection is enabled)
            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            // Handle company search input for suggestions
            const companySearchInput = document.getElementById('CompanySearch');
            const suggestionsContainer = document.getElementById('suggestions');
            const selectedCompaniesList = document.getElementById('selectedCompaniesList');
            const hiddenCompanySymbolInput = document.querySelector('input[name="CompanySymbol"]');

            companySearchInput.addEventListener('input', function () {
                const query = this.value.trim();

                if (query.length >= 2) {
                    fetch(`/api/companies/search?query=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            suggestionsContainer.innerHTML = ''; // Clear previous suggestions

                            if (data.length > 0) {
                                data.forEach(company => {
                                    const suggestionItem = document.createElement('a');
                                    suggestionItem.classList.add('list-group-item', 'list-group-item-action');
                                    suggestionItem.textContent = `${company.companyName} (${company.companySymbol})`;

                                    suggestionItem.addEventListener('click', function () {
                                        // Clear any existing selections
                                        selectedCompaniesList.innerHTML = '';

                                        // Create and append the selected company list item
                                        const listItem = document.createElement('li');
                                        listItem.classList.add('list-group-item');
                                        listItem.textContent = `${company.companyName} (${company.companySymbol})`;
                                        listItem.dataset.symbol = company.companySymbol;

                                        selectedCompaniesList.appendChild(listItem);

                                        // Populate the hidden field for CompanySymbol
                                        hiddenCompanySymbolInput.value = company.companySymbol;

                                        // Clear search field and suggestions
                                        companySearchInput.value = '';
                                        suggestionsContainer.innerHTML = '';
                                    });

                                    suggestionsContainer.appendChild(suggestionItem);
                                });
                            } else {
                                const noResultsItem = document.createElement('div');
                                noResultsItem.classList.add('list-group-item');
                                noResultsItem.textContent = 'No results found';
                                suggestionsContainer.appendChild(noResultsItem);
                            }
                        })
                        .catch(error => console.error('Error fetching suggestions:', error));
                } else {
                    suggestionsContainer.innerHTML = ''; // Clear suggestions if query is too short
                }
            });

            // Handle removing the selected company from the list
            const removeCompanyButton = document.getElementById('removeCompany');
            removeCompanyButton.addEventListener('click', function () {
                const selectedItem = document.querySelector('#selectedCompaniesList li');

                if (selectedItem) {
                    selectedCompaniesList.removeChild(selectedItem); // Remove the selected company
                    hiddenCompanySymbolInput.value = ''; // Clear the hidden input
                } else {
                    alert('Please select a company to remove.');
                }
            });

            // Optional: Reload company counts periodically (e.g., every 5 minutes)
            setInterval(loadCompanyCounts, 300000); // 300,000 ms = 5 minutes
        });
    </script>

    <!-- Optional: Include Bootstrap JS for better UI (if not already included) -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
            integrity="sha384-B4gt1jrGC7Jh4AgvQ3qHglx4eO4xXGqWUnBIi4IyJ0F3o+E/60B0R6tmUWb9BYC/"
            crossorigin="anonymous"></script>
}
 *@