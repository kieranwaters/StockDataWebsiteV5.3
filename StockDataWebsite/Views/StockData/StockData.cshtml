@using Newtonsoft.Json
@model StockDataWebsite.Models.StockDataViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Stock Data";
    ViewData["Description"] = $"View comprehensive stock data for {Model.CompanyName} ({Model.CompanySymbol}), including {Model.DataType} financial reports and historical metrics.";
}

@functions {
    public string FormatElementName(string elementName)
    {
        if (string.IsNullOrEmpty(elementName)) return elementName;
        if (elementName.ToUpperInvariant() == elementName) return elementName;
        return System.Text.RegularExpressions.Regex.Replace(elementName, "(?<!^)([A-Z])", " $1");
    }
}

<style>
    /* Add year filter styling */
    .year-filter-container {
        margin: 15px 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    #yearFilter {
        padding: 5px 10px;
        border-radius: 4px;
        border: 1px solid #ddd;
        width: 150px;
    }

    /* Existing styles remain unchanged */
    .fixed-scroll-container {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        height: 8px;
        background: transparent;
        z-index: 1000;
        overflow-x: scroll;
    }

    .table-responsive {
        overflow-x: hidden !important;
        scrollbar-width: none;
        margin-bottom: 8px;
    }

    .fixed-scroll-container::-webkit-scrollbar {
        height: 8px;
        background: #f8f9fa;
    }

    .fixed-scroll-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    html {
        overflow-y: auto !important;
        overflow-x: hidden;
    }
</style>

<h2>Stock Data for @Model.CompanyName (@Model.CompanySymbol)</h2>

@if (!string.IsNullOrEmpty(Model.StockPrice) && !Model.StockPrice.Equals("N/A", StringComparison.OrdinalIgnoreCase))
{
    <h4>Latest Price: @Model.StockPrice</h4>
}
<select id="yearFilter" class="form-select">
    <option value="all" selected="@(Model.SelectedYearFilter == "all" ? "selected" : null)">All Years</option>
    <option value="5" selected="@(Model.SelectedYearFilter == "5" ? "selected" : null)">Last 5 Years</option>
    <option value="3" selected="@(Model.SelectedYearFilter == "3" ? "selected" : null)">Last 3 Years</option>
    <option value="1" selected="@(Model.SelectedYearFilter == "1" ? "selected" : null)">Last Year</option>
</select>

<form id="addToWatchlistForm" asp-controller="StockData" asp-action="AddToWatchlist" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="stockName" value="@Model.CompanyName" />
    <input type="hidden" name="stockSymbol" value="@Model.CompanySymbol" />
    <button type="submit" class="btn btn-primary">Add to Watchlist</button>
</form>

<div id="feedbackMessage"></div>

<br />

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Financial Results</h3>
    <div>
        <a href="@Url.Action("StockData", "StockData", new { companyName=Model.CompanyName, dataType="annual", yearFilter=Model.SelectedYearFilter })"
           class="btn btn-secondary me-2 report-type-link @(Model.DataType == "annual" ? "active" : "")">Annual Data</a>

        <a href="@Url.Action("StockData", "StockData", new { companyName=Model.CompanyName, dataType="quarterly", yearFilter=Model.SelectedYearFilter })"
           class="btn btn-secondary me-2 report-type-link @(Model.DataType == "quarterly" ? "active" : "")">Quarterly Data</a>

        @if (Model.DataType == "enhanced")
        {
            <a href="@Url.Action("StockData", "StockData", new { companyName=Model.CompanyName, dataType=Model.BaseType, yearFilter=Model.SelectedYearFilter })"
               class="btn btn-secondary report-type-link @(Model.DataType=="enhanced" ? "active" : "")">Basic Financial Data</a>
        }
        else
        {
            <a href="@Url.Action("StockData", "StockData", new { companyName=Model.CompanyName, dataType="enhanced", baseType=Model.DataType, yearFilter=Model.SelectedYearFilter })"
               class="btn btn-secondary report-type-link @(Model.DataType=="enhanced" ? "active" : "")">Enhanced Financial Data</a>
        }
    </div>
</div>

<div class="alert alert-info" role="alert">
    <strong>Tip:</strong> You can click on an item name to view its historical graph.
</div>

<!-- Scrollable Table Container -->
<div class="table-responsive" style="min-width: 100%;">
    <table class="table table-striped table-bordered">
        <!-- Table content remains identical to your original -->
        <thead>
            <tr>
                @if (Model.DataType == "enhanced")
                {
                    <th class="text-center">Element</th>
                }
                else
                {
                    <th class="text-center">Financial period:</th>
                }

                @if (Model.FinancialYears != null && Model.FinancialYears.Any())
                {
                    foreach (var period in Model.FinancialYears.AsEnumerable().Reverse())
                    {
                        <th class="text-center">@period.DisplayName.Replace("Report", "").Trim()</th>
                    }
                }
                else
                {
                    <th class="text-center">Period</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (Model.Statements != null && Model.Statements.Any())
            {
                if (Model.DataType == "enhanced")
                {
                    foreach (var statement in Model.Statements)
                    {
                        foreach (var metric in statement.DisplayMetrics)
                        {
                            <tr>
                                <td class="align-middle text-nowrap">
                                    @{
                                        var formattedName = FormatElementName(metric.DisplayName ?? "").Replace("(null)", "").Trim();
                                        var isLongName = (formattedName.Length > 40);
                                        var displayName = isLongName ? formattedName.Substring(0, 40) + "..." : formattedName;

                                        var labels = Model.FinancialYears?.AsEnumerable()
                                        .Reverse()
                                        .Select(fy => fy.DisplayName.Replace("Report", "").Trim())
                                        .ToList() ?? new List<string>();

                                        var numericValues = metric.Values?.Select(v =>
                                        decimal.TryParse(v, out var n) ? n.ToString("N0") : "N/A"
                                        ).Reverse().ToList() ?? new List<string>();
                                    }

                                    @if (isLongName)
                                    {
                                        <span class="element-name text-primary"
                                              data-full-name="@formattedName"
                                              data-truncated-name="@displayName"
                                              data-expanded="false"
                                              data-metric="@formattedName"
                                              data-labels='@Html.Raw(JsonConvert.SerializeObject(labels))'
                                              data-values='@Html.Raw(JsonConvert.SerializeObject(numericValues))'
                                              style="cursor:pointer; text-decoration: underline;"
                                              title="Click to view graph">@displayName</span>
                                    }
                                    else
                                    {
                                        <span class="element-name text-primary"
                                              data-metric="@formattedName"
                                              data-labels='@Html.Raw(JsonConvert.SerializeObject(labels))'
                                              data-values='@Html.Raw(JsonConvert.SerializeObject(numericValues))'
                                              style="cursor:pointer; text-decoration: underline;"
                                              title="Click to view historical data">@formattedName</span>
                                    }
                                </td>
                                @if (metric.Values != null && metric.Values.Any())
                                {
                                    foreach (var val in metric.Values.AsEnumerable().Reverse())
                                    {
                                        <td class="text-center">
                                            @if (string.IsNullOrEmpty(val) || val.Equals("N/A", StringComparison.OrdinalIgnoreCase))
                                            {
                                                @Html.Raw("<span style='color:#ccc;'>N/A</span>")
                                            }
                                            else
                                            {
                                                @val
                                            }
                                        </td>
                                    }
                                }
                                else
                                {
                                    <td colspan="@((Model.FinancialYears?.Count??0))" class="text-center">
                                        N/A
                                    </td>
                                }
                            </tr>
                        }
                    }
                }
                else
                {
                    foreach (var statement in Model.Statements)
                    {
                        <tr class="table-primary">
                            <td colspan="@((Model.FinancialYears?.Count??0)+1)">
                                <strong>@statement.StatementType</strong>
                                @if (!string.IsNullOrEmpty(statement.ScalingLabel))
                                {
                                    <span class="badge bg-info text-dark">
                                        (@statement.ScalingLabel)
                                    </span>
                                }
                            </td>
                        </tr>
                        @if (statement.DisplayMetrics != null && statement.DisplayMetrics.Any())
                        {
                            foreach (var metric in statement.DisplayMetrics)
                            {
                                <tr>
                                    <td class="align-middle text-nowrap">
                                        @{
                                            var formattedName = FormatElementName(metric.DisplayName ?? "").Trim();
                                            var isLongName = (formattedName.Length > 40);
                                            var displayName = isLongName ? formattedName.Substring(0, 40) + "..." : formattedName;
                                        }
                                        @if (isLongName)
                                        {
                                            <span class="element-name text-primary"
                                                  data-full-name="@formattedName"
                                                  data-truncated-name="@displayName"
                                                  data-expanded="false"
                                                  data-scaling-label="@statement.ScalingLabel"
                                                  data-metric="@metric.DisplayName"
                                                  data-labels='@Html.Raw(JsonConvert.SerializeObject(Model.FinancialYears.Select(fy => fy.DisplayName.Replace("Report", "").Trim()).Reverse()))'
                                                  data-values='@Html.Raw(JsonConvert.SerializeObject(metric.Values.Select(v => v).Reverse()))'
                                                  style="cursor:pointer; text-decoration: underline;"
                                                  title="Click to view graph">@displayName</span>
                                        }
                                        else
                                        {
                                            <span class="element-name text-primary"
                                                  data-metric="@metric.DisplayName"
                                                  data-scaling-label="@statement.ScalingLabel"
                                                  data-labels='@Html.Raw(JsonConvert.SerializeObject(Model.FinancialYears.Select(fy => fy.DisplayName.Replace("Report", "").Trim()).Reverse()))'
                                                  data-values='@Html.Raw(JsonConvert.SerializeObject(metric.Values.Select(v => v).Reverse()))'
                                                  style="cursor:pointer; text-decoration: underline;"
                                                  title="Click to view historical data">@formattedName</span>
                                        }
                                    </td>
                                    @if (metric.Values != null && metric.Values.Any())
                                    {
                                        foreach (var value in metric.Values.AsEnumerable().Reverse())
                                        {
                                            <td class="text-center">
                                                @if (string.IsNullOrEmpty(value) || value.Equals("N/A", StringComparison.OrdinalIgnoreCase))
                                                {
                                                    @Html.Raw("<span style='color:#ccc;'>N/A</span>")
                                                }
                                                else
                                                {
                                                    @value
                                                }
                                            </td>
                                        }
                                    }
                                    else
                                    {
                                        <td colspan="@((Model.FinancialYears?.Count??0))" class="text-center">N/A</td>
                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="@((Model.FinancialYears?.Count??1))" class="text-center text-muted">
                                    No financial metrics available for this statement.
                                </td>
                            </tr>
                        }
                    }
                }
            }
            else
            {
                <tr>
                    <td colspan="@((Model.FinancialYears?.Count??1))">
                        No statements available.
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Fixed Scrollbar Container -->
<div class="fixed-scroll-container">
    <div class="dummy-scroll-content" style="height: 1px;"></div>
</div>

<!-- Modal for Displaying the Chart -->
<div class="modal fade" id="graphModal" tabindex="-1" aria-labelledby="graphModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Historical Data</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="loadingIndicator" style="display:none;text-align:center;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading data...</p>
                </div>
                <div class="chart-container" style="position:relative;height:400px;width:100%;">
                    <canvas id="metricChart" style="display:none;"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Store original years data
        const allYears = @Html.Raw(JsonConvert.SerializeObject(Model.FinancialYears));
        let currentDisplayYears = [...allYears].reverse();

        // Function to hide rows with all N/A values
        function hideAllNaRows() {
            document.querySelectorAll('tbody tr').forEach(row => {
                // Skip statement header rows (table-primary)
                if (row.classList.contains('table-primary')) return;

                const cells = Array.from(row.querySelectorAll('td:not(:first-child)'))
                    .filter(cell => cell.style.display !== 'none');
                const allNa = cells.every(cell => {
                    const content = cell.textContent.trim();
                    return content === 'N/A' || content === '';
                });
                row.style.display = allNa ? 'none' : '';
            });
        }

        function handleYearFilterChange(selectedValue) {
            // Update report type links
            document.querySelectorAll('.report-type-link').forEach(link => {
                const url = new URL(link.href);
                url.searchParams.set('yearFilter', selectedValue);
                link.href = url.toString();
            });

            // Update browser history
            const newUrl = new URL(window.location);
            newUrl.searchParams.set('yearFilter', selectedValue);
            window.history.replaceState({}, '', newUrl);

            // Determine years to show
            let yearsToShow;
            switch(selectedValue) {
                case '5':
                    yearsToShow = currentDisplayYears.slice(0, 5);
                    break;
                case '3':
                    yearsToShow = currentDisplayYears.slice(0, 3);
                    break;
                case '1':
                    yearsToShow = currentDisplayYears.slice(0, 1);
                    break;
                default:
                    yearsToShow = currentDisplayYears;
            }

            // Update table headers
            const headerRow = document.querySelector('thead tr');
            const headers = headerRow.querySelectorAll('th:not(:first-child)');
            headers.forEach((th, index) => {
                th.style.display = index < yearsToShow.length ? '' : 'none';
            });

            // Update table body cells
            const tableRows = document.querySelectorAll('tbody tr');
            tableRows.forEach(row => {
                const cells = row.querySelectorAll('td:not(:first-child)');
                cells.forEach((cell, index) => {
                    cell.style.display = index < yearsToShow.length ? '' : 'none';
                });
            });

            // Update horizontal scroll
            const dummyContent = document.querySelector('.dummy-scroll-content');
            const tableWrapper = document.querySelector('.table-responsive');
            dummyContent.style.width = tableWrapper.scrollWidth + 20 + 'px';

            // Hide N/A rows
            hideAllNaRows();
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Set up initial table headers
            const headerRow = document.querySelector('thead tr');
            headerRow.innerHTML = `
                ${headerRow.children[0].outerHTML}
                ${currentDisplayYears.map(year =>
                    `<th class="text-center">${year.DisplayName.replace("Report", "").trim()}</th>`
                ).join('')}
            `;

            // Set up year filter
            const yearFilter = document.getElementById('yearFilter');

            // Initial filter setup
            handleYearFilterChange(yearFilter.value);

            // Event listener for filter changes
            yearFilter.addEventListener('change', function() {
                handleYearFilterChange(this.value);
            });

            // Handle browser navigation
            window.addEventListener('popstate', function() {
                const urlParams = new URLSearchParams(window.location.search);
                const yearFilterValue = urlParams.get('yearFilter') || 'all';
                yearFilter.value = yearFilterValue;
                handleYearFilterChange(yearFilterValue);
            });

            // Scroll handling (existing code)
            const tableWrapper = document.querySelector('.table-responsive');
            const fixedScroll = document.querySelector('.fixed-scroll-container');
            const dummyContent = document.querySelector('.dummy-scroll-content');

            if (tableWrapper && fixedScroll) {
                const syncScrollWidth = () => {
                    dummyContent.style.width = (tableWrapper.scrollWidth + 20) + 'px';
                };

                syncScrollWidth();
                window.addEventListener('resize', syncScrollWidth);

                tableWrapper.addEventListener('scroll', () => {
                    fixedScroll.scrollLeft = tableWrapper.scrollLeft;
                });

                fixedScroll.addEventListener('scroll', () => {
                    tableWrapper.scrollLeft = fixedScroll.scrollLeft;
                });

                // Removed the custom wheel event handler to prevent jumpy scrolling
            }
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/js/chart.js"></script>
}
