@using Newtonsoft.Json
@using System.Net
@model StockDataWebsite.Models.StockDataViewModel

@{
    // SEO-Enhanced Title & Description
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = $"Comprehensive Financial Data for {Model.CompanyName}";
    ViewData["Description"] = $"Access comprehensive {Model.DataType} financial data, including historical metrics and the latest stock price for {Model.CompanyName} ({Model.CompanySymbol}).";
    ViewData["Keywords"] = $"stock data, financial statements, {Model.CompanyName}, {Model.CompanySymbol}, annual reports, quarterly reports, historical metrics";
}

@functions {
    // Format financial element names for display
    public string FormatElementName(string elementName)
    {
        if (string.IsNullOrEmpty(elementName)) return elementName;
        if (elementName.ToUpperInvariant() == elementName) return elementName;
        return System.Text.RegularExpressions.Regex.Replace(elementName, "(?<!^)([A-Z])", " $1");
    }
    public string UrlEncode(string value)
    {
        return WebUtility.UrlEncode(value);
    }
}

@if (!string.IsNullOrEmpty(ViewData["Keywords"]?.ToString()))
{
    <meta name="keywords" content="@ViewData["Keywords"]" />
}

<!-- JSON-LD Structured Data for SEO -->
@{
    // Ensure company name and symbol are safe for JSON
    string safeCompanyName = Model.CompanyName?.Replace("\\", "\\\\").Replace("\"", "\\\"") ?? "";
    string safeCompanySymbol = Model.CompanySymbol?.Replace("\\", "\\\\").Replace("\"", "\\\"") ?? "";
    // Generate JSON string separately before using it inside @Html.Raw()
    string jsonLdData = $@"
    {{
      ""@context"": ""https://schema.org"",
      ""@type"": ""FinancialService"",
      ""name"": ""Alpha Stock Data"",
      ""description"": ""Testing JSON snippet for {safeCompanyName} ({safeCompanySymbol})."",
      ""url"": ""https://alphastockdata.com/StockData?companyName={UrlEncode(safeCompanyName)}"",
      ""logo"": ""https://alphastockdata.com/images/logo.png"",
      ""telephone"": ""N/A"",
      ""priceRange"": ""0"",
      ""address"": ""31 Dare Rd, Birmingham, B236PE, United Kingdom"",
      ""sameAs"": [
        ""https://x.com/AlphaStockData""
      ],
      ""serviceType"": ""StockData"",
      ""areaServed"": ""United States""
    }}";
}

<script type="application/ld+json">
    @Html.Raw(jsonLdData)
</script>

<style>
    .table-controls-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        gap: 1rem;
        flex-wrap: wrap;
    }

    #yearFilter {
        padding: 5px 10px;
        border-radius: 4px;
        border: 1px solid #ddd;
        width: 200px;
    }

    #addToWatchlistForm {
        margin: 0;
    }

    .fixed-scroll-container {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        height: 8px;
        background: transparent;
        z-index: 1000;
        overflow-x: scroll;
    }

    .table-responsive {
        overflow-x: auto !important; /* Horizontal scrolling on phones */
        scrollbar-width: none;
        margin-bottom: 8px;
    }

    .fixed-scroll-container::-webkit-scrollbar {
        height: 8px;
        background: #f8f9fa;
    }

    .fixed-scroll-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    html {
        overflow-y: auto !important;
    }

    table th, table td {
        white-space: nowrap;
    }

    .element-name {
        position: relative;
    }
</style>

<h1 class="mb-3">
    Detailed Financial Data for <span class="text-primary">@Model.CompanyName</span>
    <small> (@Model.CompanySymbol)</small>
</h1>

<p>
    Discover in-depth <strong>@Model.DataType</strong> financial reports, historical metrics,
    and the latest price for <strong>@Model.CompanyName</strong>
    (symbol: <strong>@Model.CompanySymbol</strong>). Scroll down to explore various statements,
    filter by year, and add this stock to your personal watchlist for quick access in the future.
</p>

<div class="alert alert-info" role="alert">
    <strong>Tip:</strong> You can click on an item name to view its historical graph.
</div>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Financial Results</h2>
    <div>
        <a href="/StockData/StockData?companyName=@UrlEncode(Model.CompanyName)&dataType=annual&yearFilter=@Model.SelectedYearFilter"
           class="btn btn-secondary me-2 report-type-link @(Model.DataType == "annual" ? "active" : "")"
           title="View Annual Data for @Model.CompanyName">
            Annual Data
        </a>
        <a href="@Url.Action("StockData", "StockData", new { companyName = Model.CompanyName, dataType = "quarterly", yearFilter = Model.SelectedYearFilter })"
           class="btn btn-secondary me-2 report-type-link @(Model.DataType == "quarterly" ? "active" : "")"
           title="View Quarterly Data for @Model.CompanyName">
            Quarterly Data
        </a>
        @if (Model.DataType == "enhanced")
        {
            <a href="@Url.Action("StockData", "StockData", new { companyName = Model.CompanyName, dataType = Model.BaseType, yearFilter = Model.SelectedYearFilter })"
               class="btn btn-secondary report-type-link @(Model.DataType=="enhanced" ? "active" : "")"
               title="View Basic Data for @Model.CompanyName">
                Basic Financial Data
            </a>
        }
        else
        {
            <a href="@Url.Action("StockData", "StockData", new { companyName = Model.CompanyName, dataType = "enhanced", baseType = Model.DataType, yearFilter = Model.SelectedYearFilter })"
               class="btn btn-secondary report-type-link @(Model.DataType=="enhanced" ? "active" : "")"
               title="View Enhanced Data for @Model.CompanyName">
                Enhanced Financial Data
            </a>
        }
    </div>
</div>

<div class="table-controls-container">
    @Html.DropDownListFor(m => m.SelectedYearFilter, Model.YearFilterOptions,
            new { @class = "form-select", id = "yearFilter" })
    <form id="addToWatchlistForm" action="/StockData/AddToWatchlist" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" name="stockName" value="@Model.CompanyName" />
        <input type="hidden" name="stockSymbol" value="@Model.CompanySymbol" />
        <button type="submit" class="btn btn-primary">Add to Watchlist</button>
    </form>
</div>

<div class="table-responsive" style="min-width: 100%;">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                @if (Model.DataType == "enhanced")
                {
                    <th class="text-center">Element</th>
                }
                else
                {
                    <th class="text-center">Financial period:</th>
                }
                @if (Model.FinancialYears != null && Model.FinancialYears.Any())
                {
                    foreach (var period in Model.FinancialYears.AsEnumerable().Reverse())
                    {
                        <th class="text-center">@period.DisplayName.Replace("Report", "").Trim()</th>
                    }
                }
                else
                {
                    <th class="text-center">Period</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (Model.Statements != null && Model.Statements.Any())
            {
                if (Model.DataType == "enhanced")
                {
                    foreach (var statement in Model.Statements)
                    {
                        foreach (var metric in statement.DisplayMetrics)
                        {
                            <tr>
                                <td class="align-middle text-nowrap">
                                    @{
                                        var formattedName = FormatElementName(metric.DisplayName ?? "").Replace("(null)", "").Trim();
                                        var isLongName = (formattedName.Length > 40);
                                        var displayName = isLongName ? formattedName.Substring(0, 40) + "..." : formattedName;
                                        var labels = Model.FinancialYears?.AsEnumerable()
                                        .Reverse()
                                        .Select(fy => fy.DisplayName.Replace("Report", "").Trim())
                                        .ToList() ?? new List<string>();
                                        var numericValues = metric.Values?.Select(v =>
                                        decimal.TryParse(v, out var n) ? n.ToString("N0") : "N/A"
                                        ).Reverse().ToList() ?? new List<string>();
                                    }
                                    @if (isLongName)
                                    {
                                        <span class="element-name text-primary"
                                              data-full-name="@formattedName"
                                              data-truncated-name="@displayName"
                                              data-expanded="false"
                                              data-metric="@formattedName"
                                              data-labels='@Html.Raw(JsonConvert.SerializeObject(labels))'
                                              data-values='@Html.Raw(JsonConvert.SerializeObject(numericValues))'
                                              style="cursor:pointer; text-decoration: underline;"
                                              title="Click to view graph">
                                            @displayName
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="element-name text-primary"
                                              data-metric="@formattedName"
                                              data-labels='@Html.Raw(JsonConvert.SerializeObject(labels))'
                                              data-values='@Html.Raw(JsonConvert.SerializeObject(numericValues))'
                                              style="cursor:pointer; text-decoration: underline;"
                                              title="Click to view historical data">
                                            @formattedName
                                        </span>
                                    }
                                </td>
                                @if (metric.Values != null && metric.Values.Any())
                                {
                                    foreach (var val in metric.Values.AsEnumerable().Reverse())
                                    {
                                        <td class="text-center">
                                            @if (string.IsNullOrEmpty(val) || val.Equals("N/A", StringComparison.OrdinalIgnoreCase))
                                            {
                                                @Html.Raw("<span style='color:#ccc;'>N/A</span>")
                                            }
                                            else
                                            {
                                                @val
                                            }
                                        </td>
                                    }
                                }
                                else
                                {
                                    <td colspan="@((Model.FinancialYears?.Count ?? 0))" class="text-center">
                                        N/A
                                    </td>
                                }
                            </tr>
                        }
                    }
                }
                else
                {
                    foreach (var statement in Model.Statements)
                    {
                        <tr class="table-primary">
                            <td colspan="@((Model.FinancialYears?.Count ?? 0) + 1)">
                                <strong>@statement.StatementType</strong>
                                @if (!string.IsNullOrEmpty(statement.ScalingLabel))
                                {
                                    <span class="badge bg-info text-dark">
                                        (@statement.ScalingLabel)
                                    </span>
                                }
                            </td>
                        </tr>
                        @if (statement.DisplayMetrics != null && statement.DisplayMetrics.Any())
                        {
                            foreach (var metric in statement.DisplayMetrics)
                            {
                                <tr>
                                    <td class="align-middle text-nowrap">
                                        @{
                                            var formattedName = FormatElementName(metric.DisplayName ?? "").Trim();
                                            var isLongName = (formattedName.Length > 40);
                                            var displayName = isLongName ? formattedName.Substring(0, 40) + "..." : formattedName;
                                        }
                                        @if (isLongName)
                                        {
                                            <span class="element-name text-primary"
                                                  data-full-name="@formattedName"
                                                  data-truncated-name="@displayName"
                                                  data-expanded="false"
                                                  data-scaling-label="@statement.ScalingLabel"
                                                  data-metric="@metric.DisplayName"
                                                  data-labels='@Html.Raw(JsonConvert.SerializeObject(Model.FinancialYears.Select(fy => fy.DisplayName.Replace("Report", "").Trim()).Reverse()))'
                                                  data-values='@Html.Raw(JsonConvert.SerializeObject(metric.Values.Select(v => v).Reverse()))'
                                                  style="cursor:pointer; text-decoration: underline;"
                                                  title="Click to view graph">
                                                @displayName
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="element-name text-primary"
                                                  data-metric="@metric.DisplayName"
                                                  data-scaling-label="@statement.ScalingLabel"
                                                  data-labels='@Html.Raw(JsonConvert.SerializeObject(Model.FinancialYears.Select(fy => fy.DisplayName.Replace("Report", "").Trim()).Reverse()))'
                                                  data-values='@Html.Raw(JsonConvert.SerializeObject(metric.Values.Select(v => v).Reverse()))'
                                                  style="cursor:pointer; text-decoration: underline;"
                                                  title="Click to view historical data">
                                                @formattedName
                                            </span>
                                        }
                                    </td>
                                    @if (metric.Values != null && metric.Values.Any())
                                    {
                                        foreach (var value in metric.Values.AsEnumerable().Reverse())
                                        {
                                            <td class="text-center">
                                                @if (string.IsNullOrEmpty(value) || value.Equals("N/A", StringComparison.OrdinalIgnoreCase))
                                                {
                                                    @Html.Raw("<span style='color:#ccc;'>N/A</span>")
                                                }
                                                else
                                                {
                                                    @value
                                                }
                                            </td>
                                        }
                                    }
                                    else
                                    {
                                        <td colspan="@((Model.FinancialYears?.Count ?? 1))" class="text-center">N/A</td>
                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="@((Model.FinancialYears?.Count ?? 1))" class="text-center text-muted">
                                    No financial metrics available for this statement.
                                </td>
                            </tr>
                        }
                    }
                }
            }
            else
            {
                <tr>
                    <td colspan="@((Model.FinancialYears?.Count ?? 1))">
                        No statements available.
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="fixed-scroll-container">
    <div class="dummy-scroll-content" style="height: 1px;"></div>
</div>

<!-- Modal for Displaying the Chart -->
<div class="modal fade" id="graphModal" tabindex="-1" aria-labelledby="graphModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Historical Data</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="loadingIndicator" style="display:none;text-align:center;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading data...</p>
                </div>
                <div class="chart-container" style="position:relative;height:400px;width:100%;">
                    <canvas id="metricChart" style="display:none;"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const allPeriods = @Html.Raw(JsonConvert.SerializeObject(Model.FinancialYears)); // all period data
        const uniqueYears = @Html.Raw(JsonConvert.SerializeObject(Model.UniqueYears)); // unique year values
        const dataType = '@Model.DataType'; // report type from model
        const baseType = '@Model.BaseType'; // base type if enhanced
        let actualDataType;
        if (dataType === "enhanced") {
          actualDataType = (baseType === "quarterly") ? "quarterly" : "annual";
        } else {
          actualDataType = dataType;
        }
        const currentDisplayPeriods = [...allPeriods].reverse(); // display periods in reverse order

        function hideAllNaRows() {
          document.querySelectorAll('tbody tr').forEach(row => {
            if (row.classList.contains('table-primary')) return;
            const cells = Array.from(row.querySelectorAll('td:not(:first-child)'))
              .filter(cell => cell.style.display !== 'none');
            const allNa = cells.every(cell =>
              cell.textContent.trim() === 'N/A' || cell.textContent.trim() === ''
            );
            row.style.display = allNa ? 'none' : '';
          });
        }

        function handleYearFilterChange(selectedValue) {
          document.querySelectorAll('.report-type-link').forEach(link => {
            const url = new URL(link.href);
            url.searchParams.set('yearFilter', selectedValue);
            link.href = url.toString();
          });
          const newUrl = new URL(window.location);
          newUrl.searchParams.set('yearFilter', selectedValue);
          window.history.replaceState({}, "", newUrl);
          let numYears;
          switch (selectedValue) {
            case '5':
              numYears = 5;
              break;
            case '3':
              numYears = 3;
              break;
            case '1':
              numYears = 1;
              break;
            default:
              numYears = uniqueYears.length;
          }
          const yearsToShow = uniqueYears.slice(0, numYears);
          let periodsToShow;
          if (actualDataType === "annual") {
            periodsToShow = yearsToShow.map(year => year.toString());
          } else {
            periodsToShow = currentDisplayPeriods
              .filter(p => {
                const yr = parseInt(p.CompositeKey.split('-')[0]);
                return yearsToShow.includes(yr);
              })
              .map(p => p.DisplayName);
          }
          const headerRow = document.querySelector('thead tr');
          const headers = headerRow.querySelectorAll('th:not(:first-child)');
          headers.forEach((th, index) => {
            const period = currentDisplayPeriods[index];
            if (actualDataType === "annual") {
              th.style.display = periodsToShow.includes(period.DisplayName) ? '' : 'none';
            } else {
              const yr = parseInt(period.CompositeKey.split('-')[0]);
              th.style.display = yearsToShow.includes(yr) ? '' : 'none';
            }
          });
          const tableRows = document.querySelectorAll('tbody tr');
          tableRows.forEach(row => {
            const cells = row.querySelectorAll('td:not(:first-child)');
            cells.forEach((cell, index) => {
              const period = currentDisplayPeriods[index];
              if (actualDataType === "annual") {
                cell.style.display = periodsToShow.includes(period.DisplayName) ? '' : 'none';
              } else {
                const yr = parseInt(period.CompositeKey.split('-')[0]);
                cell.style.display = yearsToShow.includes(yr) ? '' : 'none';
              }
            });
          });
          const dummyContent = document.querySelector('.dummy-scroll-content');
          const tableWrapper = document.querySelector('.table-responsive');
          dummyContent.style.width = (tableWrapper.scrollWidth + 20) + 'px';
          hideAllNaRows();
        }

        document.addEventListener('DOMContentLoaded', function () {
          const headerRow = document.querySelector('thead tr');
          headerRow.innerHTML = `
            ${headerRow.children[0].outerHTML}
            ${currentDisplayPeriods
              .map(p => `<th class="text-center">${p.DisplayName.replace("Report", "").trim()}</th>`)
              .join('')}
          `;
          const yearFilter = document.getElementById('yearFilter');
          // Set default dropdown value based on report type.
          if (dataType === "quarterly") {
            yearFilter.value = "3"; // default 3 years for quarterly reports
          } else if (dataType === "annual") {
            yearFilter.value = "all"; // show all annual reports
          }
          handleYearFilterChange(yearFilter.value);
          yearFilter.addEventListener('change', function () {
            handleYearFilterChange(this.value);
          });
          window.addEventListener('popstate', function () {
            const urlParams = new URLSearchParams(window.location.search);
            const yearFilterValue = urlParams.get('yearFilter') ||
              (dataType === "quarterly" ? "3" : "all");
            yearFilter.value = yearFilterValue;
            handleYearFilterChange(yearFilterValue);
          });
          const tableWrapperElement = document.querySelector('.table-responsive');
          const fixedScroll = document.querySelector('.fixed-scroll-container');
          const dummyContent = document.querySelector('.dummy-scroll-content');
          if (tableWrapperElement && fixedScroll) {
            const syncScrollWidth = () => {
              dummyContent.style.width = (tableWrapperElement.scrollWidth + 20) + 'px';
            };
            syncScrollWidth();
            window.addEventListener('resize', syncScrollWidth);
            tableWrapperElement.addEventListener('scroll', () => {
              fixedScroll.scrollLeft = tableWrapperElement.scrollLeft;
            });
            fixedScroll.addEventListener('scroll', () => {
              tableWrapperElement.scrollLeft = fixedScroll.scrollLeft;
            });
          }
        });

        // Cache the table HTML using a key that depends on both the company symbol and report type.
        (function () {
          const htmlCacheKey = 'financialTableHTML_' +
            encodeURIComponent('@Model.CompanySymbol') + '_' +
            encodeURIComponent(dataType);
          document.addEventListener('DOMContentLoaded', () => {
            let cachedHtml = localStorage.getItem(htmlCacheKey);
            if (cachedHtml) {
              console.log('HTML cache HIT -> Replacing table contents with cached HTML for', htmlCacheKey);
              let tableContainer = document.querySelector('.table-responsive');
              if (tableContainer) { tableContainer.innerHTML = cachedHtml; }
            } else {
              console.log('HTML cache MISS for', htmlCacheKey);
            }
            setTimeout(() => {
              let tableContainer = document.querySelector('.table-responsive');
              if (tableContainer) {
                localStorage.setItem(htmlCacheKey, tableContainer.innerHTML);
                console.log('Saved current table HTML to cacheKey:', htmlCacheKey);
              }
            }, 2000);
          });
        })();

        (function () {
          const cacheKey = 'financialData_' + '@Model.CompanySymbol';
          const cacheExpiryKey = cacheKey + '_expiry';
          const cacheDuration = 1000 * 60 * 5; // 5 minutes
          function fetchFinancialData() {
            let now = Date.now();
            let expiry = localStorage.getItem(cacheExpiryKey);
            if (expiry && now < parseInt(expiry)) {
              let cached = localStorage.getItem(cacheKey);
              if (cached) {
                try {
                  console.log("Cache HIT for JSON:", cacheKey);
                  let data = JSON.parse(cached);
                  processFinancialData(data);
                  return;
                } catch (e) {
                  console.error('Error parsing cached data:', e);
                }
              }
            }
            console.log("Cache MISS, fetching from server for JSON:", cacheKey);
            fetch('/api/financialdata?companySymbol=' + encodeURIComponent('@Model.CompanySymbol'))
              .then(response => {
                if (!response.ok) { throw new Error('HTTP error, status = ' + response.status); }
                return response.json();
              })
              .then(data => {
                localStorage.setItem(cacheKey, JSON.stringify(data));
                localStorage.setItem(cacheExpiryKey, (now + cacheDuration).toString());
                processFinancialData(data);
              })
              .catch(error => {
                console.error('Error fetching financial data:', error);
              });
          }
          function processFinancialData(data) {
            console.log('Financial data:', data);
          }
          document.addEventListener('DOMContentLoaded', fetchFinancialData);
        })();
    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/js/chart.js"></script>
}



