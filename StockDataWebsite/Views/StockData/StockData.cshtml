@using Newtonsoft.Json
@using System.Net
@model StockDataWebsite.Models.StockDataViewModel

@{
    // SEO-Enhanced Title & Description
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = $"Comprehensive Financial Data for {Model.CompanyName}";
    ViewData["Description"] = $"Access comprehensive {Model.DataType} financial data, including historical metrics and the latest stock price for {Model.CompanyName} ({Model.CompanySymbol}).";
    ViewData["Keywords"] = $"stock data, financial statements, {Model.CompanyName}, {Model.CompanySymbol}, annual reports, quarterly reports, historical metrics";
}

@functions {
    // Format financial element names for display
    public string FormatElementName(string elementName)
    {
        if (string.IsNullOrEmpty(elementName)) return elementName;
        if (elementName.ToUpperInvariant() == elementName) return elementName;
        return System.Text.RegularExpressions.Regex.Replace(elementName, "(?<!^)([A-Z])", " $1");
    }
    public string UrlEncode(string value)
    {
        return WebUtility.UrlEncode(value);
        // Alternatively, you can use:
        // return Uri.EscapeDataString(value);
    }
}

@if (!string.IsNullOrEmpty(ViewData["Keywords"]?.ToString()))
{
    <meta name="keywords" content="@ViewData["Keywords"]" />
}

<!-- JSON-LD Structured Data for SEO -->
@{
    // Ensure company name and symbol are safe for JSON
    string safeCompanyName = Model.CompanyName?.Replace("\\", "\\\\").Replace("\"", "\\\"") ?? "";
    string safeCompanySymbol = Model.CompanySymbol?.Replace("\\", "\\\\").Replace("\"", "\\\"") ?? "";

    // Generate JSON string separately before using it inside @Html.Raw()
    string jsonLdData = $@"
    {{
      ""@context"": ""https://schema.org"",
      ""@type"": ""FinancialService"",
      ""name"": ""Alpha Stock Data"",
      ""description"": ""Testing JSON snippet for {safeCompanyName} ({safeCompanySymbol})."",
      ""url"": ""https://alphastockdata.com/StockData?companyName={UrlEncode(safeCompanyName)}"",
      ""logo"": ""https://alphastockdata.com/images/logo.png"",
      ""telephone"": ""N/A"",
      ""priceRange"": ""0"",
      ""address"": ""31 Dare Rd, Birmingham, B236PE, United Kingdom"",
      ""sameAs"": [
        ""https://x.com/AlphaStockData""
      ],
      ""serviceType"": ""StockData"",
      ""areaServed"": ""United States""
    }}";
}

<script type="application/ld+json">
    @Html.Raw(jsonLdData)
</script>

<style>
    /* Container for the area under the tip box but above the table */
    .table-controls-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem; /* space below */
        gap: 1rem; /* optional spacing between items if needed */
        flex-wrap: wrap; /* ensure it wraps on smaller screens */
    }

    /* Year filter styling */
    #yearFilter {
        padding: 5px 10px;
        border-radius: 4px;
        border: 1px solid #ddd;
        width: 200px;
    }

    /* Watchlist form styling */
    #addToWatchlistForm {
        margin: 0;
    }

    /* Existing styles remain unchanged */
    .fixed-scroll-container {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        height: 8px;
        background: transparent;
        z-index: 1000;
        overflow-x: scroll;
    }

    .table-responsive {
        /*overflow-x:hidden !important;*/ /* Removed to allow scrolling on phones */
        overflow-x: auto !important; /* Changed to allow horizontal scrolling on phones */
        scrollbar-width: none;
        margin-bottom: 8px;
    }


    .fixed-scroll-container::-webkit-scrollbar {
        height: 8px;
        background: #f8f9fa;
    }

    .fixed-scroll-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    html {
        overflow-y: auto !important;
    }

    /* Optional: Enhance the readability of the table */
    table th, table td {
        white-space: nowrap;
    }

    /* Tooltip styling */
    .element-name {
        position: relative;
    }
</style>

<h1 class="mb-3">
    Detailed Financial Data for
    <span class="text-primary">@Model.CompanyName</span>
    <small> (@Model.CompanySymbol)</small>
</h1>

<!-- Intro Paragraph (if any) can remain above or be removed as you prefer -->
<p>
    Discover in-depth <strong>@Model.DataType</strong> financial reports, historical metrics,
    and the latest price for <strong>@Model.CompanyName</strong>
    (symbol: <strong>@Model.CompanySymbol</strong>). Scroll down to explore various statements,
    filter by year, and add this stock to your personal watchlist for quick access in the future.
</p>

<!-- 'Financial Results' heading, data type buttons, etc., could go here if you want -->

<div class="alert alert-info" role="alert">
    <strong>Tip:</strong> You can click on an item name to view its historical graph.
</div>


<!-- Financial Results Section -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Financial Results</h2>
    <div>
        <a href="/StockData/StockData?companyName=@UrlEncode(Model.CompanyName)&dataType=annual&yearFilter=@Model.SelectedYearFilter"
   class="btn btn-secondary me-2 report-type-link @(Model.DataType == "annual" ? "active" : "")"
   title="View Annual Data for @Model.CompanyName">
    Annual Data
</a>


        <a href="@Url.Action("StockData", "StockData", new { companyName = Model.CompanyName, dataType = "quarterly", yearFilter = Model.SelectedYearFilter })"
           class="btn btn-secondary me-2 report-type-link @(Model.DataType == "quarterly" ? "active" : "")"
           title="View Quarterly Data for @Model.CompanyName">
            Quarterly Data
        </a>

        @if (Model.DataType == "enhanced")
        {
            <a href="@Url.Action("StockData", "StockData", new { companyName = Model.CompanyName, dataType = Model.BaseType, yearFilter = Model.SelectedYearFilter })"
               class="btn btn-secondary report-type-link @(Model.DataType=="enhanced" ? "active" : "")"
               title="View Basic Data for @Model.CompanyName">
                Basic Financial Data
            </a>
        }
        else
        {
            <a href="@Url.Action("StockData", "StockData", new { companyName = Model.CompanyName, dataType = "enhanced", baseType = Model.DataType, yearFilter = Model.SelectedYearFilter })"
               class="btn btn-secondary report-type-link @(Model.DataType=="enhanced" ? "active" : "")"
               title="View Enhanced Data for @Model.CompanyName">
                Enhanced Financial Data
            </a>
        }
    </div>
</div>
<div class="table-controls-container">
    <!-- Left: Year Filter Dropdown -->
    @Html.DropDownListFor(
            m => m.SelectedYearFilter,
            Model.YearFilterOptions,
            new { @class = "form-select", id = "yearFilter" }
            )

    <!-- Right: Add to Watchlist button -->
    <form id="addToWatchlistForm" action="/StockData/AddToWatchlist" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" name="stockName" value="@Model.CompanyName" />
        <input type="hidden" name="stockSymbol" value="@Model.CompanySymbol" />
        <button type="submit" class="btn btn-primary">Add to Watchlist</button>
    </form>

</div>

<!-- Scrollable Table Container -->
<div class="table-responsive" style="min-width: 100%;">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                @if (Model.DataType == "enhanced")
                {
                    <th class="text-center">Element</th>
                }
                else
                {
                    <th class="text-center">Financial period:</th>
                }

                @if (Model.FinancialYears != null && Model.FinancialYears.Any())
                {
                    foreach (var period in Model.FinancialYears.AsEnumerable().Reverse())
                    {
                        <th class="text-center">@period.DisplayName.Replace("Report", "").Trim()</th>
                    }
                }
                else
                {
                    <th class="text-center">Period</th>
                }
            </tr>
        </thead>
        <tbody>
            @* Existing table body logic *@
            @if (Model.Statements != null && Model.Statements.Any())
            {
                if (Model.DataType == "enhanced")
                {
                    foreach (var statement in Model.Statements)
                    {
                        foreach (var metric in statement.DisplayMetrics)
                        {
                            <tr>
                                <td class="align-middle text-nowrap">
                                    @* Format and handle potentially lengthy metric names *@
                                    @{
                                        var formattedName = FormatElementName(metric.DisplayName ?? "").Replace("(null)", "").Trim();
                                        var isLongName = (formattedName.Length > 40);
                                        var displayName = isLongName ? formattedName.Substring(0, 40) + "..." : formattedName;

                                        var labels = Model.FinancialYears?.AsEnumerable()
                                            .Reverse()
                                            .Select(fy => fy.DisplayName.Replace("Report", "").Trim())
                                            .ToList() ?? new List<string>();

                                        var numericValues = metric.Values?.Select(v =>
                                            decimal.TryParse(v, out var n) ? n.ToString("N0") : "N/A"
                                        ).Reverse().ToList() ?? new List<string>();
                                    }

                                    @if (isLongName)
                                    {
                                        <span class="element-name text-primary"
                                              data-full-name="@formattedName"
                                              data-truncated-name="@displayName"
                                              data-expanded="false"
                                              data-metric="@formattedName"
                                              data-labels='@Html.Raw(JsonConvert.SerializeObject(labels))'
                                              data-values='@Html.Raw(JsonConvert.SerializeObject(numericValues))'
                                              style="cursor:pointer; text-decoration: underline;"
                                              title="Click to view graph">
                                            @displayName
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="element-name text-primary"
                                              data-metric="@formattedName"
                                              data-labels='@Html.Raw(JsonConvert.SerializeObject(labels))'
                                              data-values='@Html.Raw(JsonConvert.SerializeObject(numericValues))'
                                              style="cursor:pointer; text-decoration: underline;"
                                              title="Click to view historical data">
                                            @formattedName
                                        </span>
                                    }
                                </td>
                                @if (metric.Values != null && metric.Values.Any())
                                {
                                    foreach (var val in metric.Values.AsEnumerable().Reverse())
                                    {
                                        <td class="text-center">
                                            @if (string.IsNullOrEmpty(val) || val.Equals("N/A", StringComparison.OrdinalIgnoreCase))
                                            {
                                                @Html.Raw("<span style='color:#ccc;'>N/A</span>")
                                            }
                                            else
                                            {
                                                @val
                                            }
                                        </td>
                                    }
                                }
                                else
                                {
                                    <td colspan="@((Model.FinancialYears?.Count ?? 0))" class="text-center">
                                        N/A
                                    </td>
                                }
                            </tr>
                        }
                    }
                }
                else
                {
                    foreach (var statement in Model.Statements)
                    {
                        <tr class="table-primary">
                            <td colspan="@((Model.FinancialYears?.Count ?? 0) + 1)">
                                <strong>@statement.StatementType</strong>
                                @if (!string.IsNullOrEmpty(statement.ScalingLabel))
                                {
                                    <span class="badge bg-info text-dark">
                                        (@statement.ScalingLabel)
                                    </span>
                                }
                            </td>
                        </tr>

                        @if (statement.DisplayMetrics != null && statement.DisplayMetrics.Any())
                        {
                            foreach (var metric in statement.DisplayMetrics)
                            {
                                <tr>
                                    <td class="align-middle text-nowrap">
                                        @* Format and handle lengthy metric names *@
                                        @{
                                            var formattedName = FormatElementName(metric.DisplayName ?? "").Trim();
                                            var isLongName = (formattedName.Length > 40);
                                            var displayName = isLongName ? formattedName.Substring(0, 40) + "..." : formattedName;
                                        }
                                        @if (isLongName)
                                        {
                                            <span class="element-name text-primary"
                                                  data-full-name="@formattedName"
                                                  data-truncated-name="@displayName"
                                                  data-expanded="false"
                                                  data-scaling-label="@statement.ScalingLabel"
                                                  data-metric="@metric.DisplayName"
                                                  data-labels='@Html.Raw(JsonConvert.SerializeObject(Model.FinancialYears.Select(fy => fy.DisplayName.Replace("Report", "").Trim()).Reverse()))'
                                                  data-values='@Html.Raw(JsonConvert.SerializeObject(metric.Values.Select(v => v).Reverse()))'
                                                  style="cursor:pointer; text-decoration: underline;"
                                                  title="Click to view graph">
                                                      @displayName
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="element-name text-primary"
                                                  data-metric="@metric.DisplayName"
                                                  data-scaling-label="@statement.ScalingLabel"
                                                  data-labels='@Html.Raw(JsonConvert.SerializeObject(Model.FinancialYears.Select(fy => fy.DisplayName.Replace("Report", "").Trim()).Reverse()))'
                                                  data-values='@Html.Raw(JsonConvert.SerializeObject(metric.Values.Select(v => v).Reverse()))'
                                                  style="cursor:pointer; text-decoration: underline;"
                                                  title="Click to view historical data">
                                                      @formattedName
                                            </span>
                                        }
                                    </td>
                                    @if (metric.Values != null && metric.Values.Any())
                                    {
                                        foreach (var value in metric.Values.AsEnumerable().Reverse())
                                        {
                                            <td class="text-center">
                                                @if (string.IsNullOrEmpty(value) || value.Equals("N/A", StringComparison.OrdinalIgnoreCase))
                                                {
                                                    @Html.Raw("<span style='color:#ccc;'>N/A</span>")
                                                }
                                                else
                                                {
                                                    @value
                                                }
                                            </td>
                                        }
                                    }
                                    else
                                    {
                                        <td colspan="@((Model.FinancialYears?.Count ?? 1))" class="text-center">N/A</td>
                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="@((Model.FinancialYears?.Count ?? 1))" class="text-center text-muted">
                                    No financial metrics available for this statement.
                                </td>
                            </tr>
                        }
                    }
                }
            }
            else
            {
                <tr>
                    <td colspan="@((Model.FinancialYears?.Count ?? 1))">
                        No statements available.
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Fixed Scrollbar Container -->
<div class="fixed-scroll-container">
    <div class="dummy-scroll-content" style="height: 1px;"></div>
</div>

<!-- Modal for Displaying the Chart -->
<div class="modal fade" id="graphModal" tabindex="-1" aria-labelledby="graphModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Historical Data</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="loadingIndicator" style="display:none;text-align:center;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading data...</p>
                </div>
                <div class="chart-container" style="position:relative;height:400px;width:100%;">
                    <canvas id="metricChart" style="display:none;"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        // Serialize and assign FinancialYears and UniqueYears from the model to JavaScript variables
                const allPeriods=@Html.Raw(JsonConvert.SerializeObject(Model.FinancialYears));
                const uniqueYears=@Html.Raw(JsonConvert.SerializeObject(Model.UniqueYears));
                const dataType='@Model.DataType'; // "annual","quarterly","enhanced"
                const baseType='@Model.BaseType'; // if dataType=="enhanced", can be "annual" or "quarterly"
                // Decide what the real data type is: if "enhanced quarterly" or "enhanced annual"
                let actualDataType;
                if(dataType==="enhanced"){
                    if(baseType==="quarterly"){actualDataType="quarterly";}else{actualDataType="annual";}
                }else{
                    actualDataType=dataType;
                }
                // Reverse the periods to have them in descending order (latest first)
                const currentDisplayPeriods=[...allPeriods].reverse();
                // Function to hide rows with all N/A values
                function hideAllNaRows(){
                    document.querySelectorAll('tbody tr').forEach(row=>{
                        if(row.classList.contains('table-primary'))return; // skip statement header rows
                        const cells=Array.from(row.querySelectorAll('td:not(:first-child)')).filter(cell=>cell.style.display!== 'none');
                        const allNa=cells.every(cell=>{
                            const content=cell.textContent.trim();
                            return content==='N/A'||content==='';
                        });
                        row.style.display=allNa?'none':'';
                    });
                }
                // Function to handle the year filter change
                function handleYearFilterChange(selectedValue){
                    // Update report-type links with new yearFilter parameter
                    document.querySelectorAll('.report-type-link').forEach(link=>{
                        const url=new URL(link.href);
                        url.searchParams.set('yearFilter',selectedValue);
                        link.href=url.toString();
                    });
                    // Update browser history
                    const newUrl=new URL(window.location);
                    newUrl.searchParams.set('yearFilter',selectedValue);
                    window.history.replaceState({},"",newUrl);
                    // Determine how many years to display
                    let numYears;
                    switch(selectedValue){
                        case '5':numYears=5;break;
                        case '3':numYears=3;break;
                        case '1':numYears=1;break;
                        default:numYears=uniqueYears.length; // all
                    }
                    // Select the top 'numYears' from uniqueYears (descending order)
                    const yearsToShow=uniqueYears.slice(0,numYears);
                    // Determine which periods to show based on actualDataType
                    let periodsToShow;
                    if(actualDataType==="annual"){
                        // For annual data, periods are just the selected years
                        periodsToShow=yearsToShow.map(year=>year.toString());
                    }else if(actualDataType==="quarterly"){
                        // For quarterly data, include all quarters within the selected years
                        periodsToShow=currentDisplayPeriods.filter(period=>{
                            const yr=parseInt(period.CompositeKey.split('-')[0]);
                            return yearsToShow.includes(yr);
                        }).map(period=>period.DisplayName);
                    }
                    // Update table headers
                    const headerRow=document.querySelector('thead tr');
                    const headers=headerRow.querySelectorAll('th:not(:first-child)');
                    headers.forEach((th,index)=>{
                        const period=currentDisplayPeriods[index];
                        if(actualDataType==="annual"){
                            th.style.display=periodsToShow.includes(period.DisplayName)?'':'none';
                        }else if(actualDataType==="quarterly"){
                            const yr=parseInt(period.CompositeKey.split('-')[0]);
                            th.style.display=yearsToShow.includes(yr)?'':'none';
                        }
                    });
                    // Update table body cells
                    const tableRows=document.querySelectorAll('tbody tr');
                    tableRows.forEach(row=>{
                        const cells=row.querySelectorAll('td:not(:first-child)');
                        cells.forEach((cell,index)=>{
                            const period=currentDisplayPeriods[index];
                            if(actualDataType==="annual"){
                                cell.style.display=periodsToShow.includes(period.DisplayName)?'':'none';
                            }else if(actualDataType==="quarterly"){
                                const yr=parseInt(period.CompositeKey.split('-')[0]);
                                cell.style.display=yearsToShow.includes(yr)?'':'none';
                            }
                        });
                    });
                    // Sync horizontal scroll
                    const dummyContent=document.querySelector('.dummy-scroll-content');
                    const tableWrapper=document.querySelector('.table-responsive');
                    dummyContent.style.width=(tableWrapper.scrollWidth+20)+'px';
                    // Hide rows that are all N/A
                    hideAllNaRows();
                }
                // Initialize on DOMContentLoaded
                document.addEventListener('DOMContentLoaded',function(){
                    // Set up initial table headers
                    const headerRow=document.querySelector('thead tr');
                    headerRow.innerHTML=`
                        ${headerRow.children[0].outerHTML}
                        ${currentDisplayPeriods.map(period=>`<th class="text-center">${period.DisplayName.replace("Report","").trim()}</th>`).join('')}
                    `;
                    // Set up the year filter
                    const yearFilter=document.getElementById('yearFilter');
                    handleYearFilterChange(yearFilter.value);
                    yearFilter.addEventListener('change',function(){handleYearFilterChange(this.value);});
                    // Handle browser nav (back/forward)
                    window.addEventListener('popstate',function(){
                        const urlParams=new URLSearchParams(window.location.search);
                        const yearFilterValue=urlParams.get('yearFilter')||'all';
                        yearFilter.value=yearFilterValue;
                        handleYearFilterChange(yearFilterValue);
                    });
                    // Horizontal scroll sync
                    const tableWrapperElement=document.querySelector('.table-responsive');
                    const fixedScroll=document.querySelector('.fixed-scroll-container');
                    const dummyContent=document.querySelector('.dummy-scroll-content');
                    if(tableWrapperElement&&fixedScroll){
                        const syncScrollWidth=()=>{dummyContent.style.width=(tableWrapperElement.scrollWidth+20)+'px';};
                        syncScrollWidth();
                        window.addEventListener('resize',syncScrollWidth);
                        tableWrapperElement.addEventListener('scroll',()=>{fixedScroll.scrollLeft=tableWrapperElement.scrollLeft;});
                        fixedScroll.addEventListener('scroll',()=>{tableWrapperElement.scrollLeft=fixedScroll.scrollLeft;});
                    }
                    // Add additional JS here if needed
                });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/js/chart.js"></script>
}
